#!/bin/bash

# resources cluster resource
function doListResources {
    echo -e "\e[33mList\e[0m \e[1mavailables cluster resources\e[0m"
    doListResourcesAbstract "local" "false"
    doListResourcesAbstract "shared" "false"
}

# resources cluster resource generator for both local or shared
function doListResourcesAbstract {
    local LIST
    local LISTRead=()
    local TITLE=shared
    local ECHOTITLE=true
    local filepath=""
    local filepathlocal=""
    local desc=""
    if [[ $1 == "local" ]]; then
        LIST=$(listResourcesLocal)
        TITLE=local
    else
        LIST=$(listResourcesDefault)
        TITLE=shared
    fi
    if [[ $2 == "false" ]]; then
        ECHOTITLE=false
    fi
    local LISTOutput=($(constructResourcesList "${LIST[@]}" "${LISTRead[@]}"))
    COUNT=${#LISTOutput[@]}
    if [[ $ECHOTITLE == "true" ]]; then
        echo -e "\e[33mList\e[0m \e[1m$COUNT\e[0m availables \e[0m$TITLE\e[0m cluster resources"
    fi
    for resource in "${LISTOutput[@]}"; do
        filepath=$SXCM_RESOURCES_PATH/$resource
        filepathlocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES
        type=none
        if [[ -d $filepath ]]; then
            type="shared (script)"
        elif [[ -f $filepath.yml ]]; then
            type="shared (yaml)"
        elif [[ -d $filepathlocal/$resource ]]; then
            type="local  (script)"
        elif [[ -f $filepathlocal/$resource.yml ]]; then
            type="local  (yaml)"
        fi
        printf "\e[1m%-20s\e[0m %s\n" $resource "$type"
        desc=""
    done
}

# construct a list of resources
function constructResourcesList {
    local LISTin=$1
    local LISTout=$2
    local COUNT=${#LISTin[@]}
    for i in "${!LISTin[@]}"; do
        local newresource=${LISTin[i]}
        local isFound=false
        for j in "${!LISTout[@]}"; do
            local recordedresource=${LISTout[j]}
            if [[ $newresource = $recordedresource ]]; then
                isFound=true
            fi
        done
        if [[ $isFound == "false" ]]; then
            LISTout+=("$newresource")
        fi
    done
    for i in "${!LISTout[@]}"; do
        echo "${LISTout[i]}"
    done
}

# get list of default cluster resources
function listResourcesDefault {
    echo $(listResources $SXCM_RESOURCES_PATH)
}

# get list of local resources
function listResourcesLocal {
    echo $(listResources $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES)
}

# get list of cluster cluster resources
function listResourcesCluster {
    local cn=$1
    local resourceDirLocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn/$SXCM_USER_CONF_DIR_RESOURCES
    echo $(listResources $resourceDirLocal)
}

# get list cluster configuration
function listResources {
    local path=${1}
    local LIST=$(ls $path)
    local COUNT=$(echo $LIST | wc -w)
    if [[ $COUNT -gt 0 ]]; then
        for resource in $LIST; do
            foo=${resource#"$path/"}
            foo=${foo%".yml"}
            echo "${foo}"
        done
    fi
}

# read the content of the cluster resource title from the given file
function extractResourceTitle {
    local title=$(grep -A0 -P '^    openshift.io/display-name:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
    echo "$title"
}

# read the content of the cluster resource description from the given file
function extractResourceDescription {
    local desc=$(grep -A0 -m1 -P '^    description:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
    echo "$desc"
}

# read the content of the cluster resource timeout from the given file
function extractResourceTimeout {
    local CLUSTERTIMEOUT=$(cat $1 | yq .metadata.annotations.sxcm_console_timeout -cr)
    echo "$CLUSTERTIMEOUT"
}

# create cluster resources
function applyClusterResource {
    local UPSERT=$1
    local cn=$2
    local rn=$3
    local clusterConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    local localEnv=${SXCM_ENV:-dev}
    local localVersion=${SXCM_VERSION:-beta}
    local localScope=${SXCM_CLUSTER_SCOPE:-scope}
    local localToken=${SXCM_CLUSTER_ADMIN_TOKEN:-mytoken} 
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirResource=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local clusterRegion=$(extractOCPInstallAWSRegion $clusterConfOCPInstallFile)
    local clusterProfile=$(extractOCPInstallProfile $clusterConfOCPInstallFile)
    local clusterID=$(oc get machineset -n openshift-machine-api -o jsonpath="{.items[0].metadata.labels}" | cut -d \" -f 4)
    local clusterName=$(echo $SXCM_CLUSTER_URL | sed -e 's|https://||g')
    clusterName=$(echo $clusterName | sed -e 's|\.|-|g')
    local CLUSTERTIMEOUT=5
    local CMD="oc apply $SXCM_OCAPPLY_OPTS --token=$localToken --cluster=$clusterName -f -"
    if [[ $UPSERT == "delete" ]]
    then
        CMD="oc delete -f -"
    fi
    if [[ -r $clusterConfDirResource/$rn.yml ]]
    then
        CLUSTERTIMEOUT=$(extractResourceTimeout $clusterConfDirResource/$rn.yml)
        echo -e "${UPSERT} \e[1m$rn\e[0m cluster \e[1mresource\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${rn}.yml\e[0m \e[93m(admin)\e[0m"
        if [[ 
              "$rn" == "quay" || 
              "$rn" == "3scale" || 
              "$rn" == "argocd-apps" 
            ]]
        then
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$localEnv \
            -p VERSION=$localVersion \
            -p CLUSTER_PROFILE=$clusterProfile \
            -p RHN_USER=$SXCM_RHN_USER \
            -p RHN_PASSWORD=$SXCM_RHN_PASSWORD \
            | $CMD
        elif [[ 
              "$rn" == "argocd-deploy" || 
              "$rn" == "argocd-deploy-small" 
            ]]
        then
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$SXCM_ENV \
            -p VERSION=$localVersion \
            -p AWS_ZONE=$SXCM_AWS_ZONE \
            -p AWS_ACCESS_ID=$SXCM_AWS_ID \
            -p AWS_ACCESS_KEY=$SXCM_AWS_KEY \
            -p AWS_SMTP_USER=$SXCM_AWS_SMTP_USER \
            -p AWS_SMTP_PASSWORD=$SXCM_AWS_SMTP_PASSWORD \
            -p AWS_SMTP_ZONE=$SXCM_AWS_SMTPZONE \
            -p AWS_SMTP_FROM=$SXCM_AWS_SMTPFROM \
            -p CLUSTER_PROFILE=$clusterProfile \
            | $CMD
        elif [[ "$rn" == "machine" ]]
        then
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$localEnv \
            -p VERSION=$localVersion \
            -p CLUSTERID=$clusterID \
            -p CLUSTER_REGION=$clusterRegion \
            -p CLUSTER_PROFILE=$clusterProfile \
            -p RHN_USER=$SXCM_RHN_USER \
            -p RHN_PASSWORD=$SXCM_RHN_PASSWORD \
            | $CMD
        else
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$localEnv \
            -p VERSION=$localVersion \
            -p CLUSTER_PROFILE=$clusterProfile \
            | $CMD
        fi
        if [[ "${UPSERT}" == "create" ]]; then
            echo -e "wait ${CLUSTERTIMEOUT}sec for operator dependencies start"
            temporize $CLUSTERTIMEOUT 5
        else
            echo -e "wait 5sec for operator dependencies update"
            temporize 2 1
        fi
    fi
    if [[ -d $clusterConfDirResource/$rn ]]
    then
        local ressscript="upsert.sh"
        if [[ -x $clusterConfDirResource/$rn/$ressscript ]]
        then
            echo -e "${UPSERT} \e[1m$rn\e[0m cluster \e[1mresource\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${ressscript}\e[0m \e[93m(admin)\e[0m"
            . $clusterConfDirResource/$rn/$ressscript "$cn" "$localScope" "$localEnv" "$localVersion" "$localToken" "$cn" "$clusterName"
            if [[ "${UPSERT}" == "create" ]]; then
                echo -e "wait ${CLUSTERTIMEOUT}sec for deployment dependencies start"
                temporize 10 2
            fi
        else 
            echo -e "No \e[1m$rn\e[0m cluster \e[1mresource\e[0m found at \e[1m$clusterConfDirResource/$rn/$ressscript\e[0 or is executable"
        fi
    fi
}

##################

# create cluster resource configuration
function doResourceCreate {
    local rn=$1
    local sourceFile=$2
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    if [[ $sourceFile == '' ]]; then
        sourceFile="./$rn.yml"
    fi
    echo -e "\e[1m\e[32mCreate\e[0m  the cluster resource \e[1m$rn\e[0m"
    local resourceDirLocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES
    if [[ -r $resourceDirLocal/$rn.yml ]]; then
        echo -en "  Do you want to reset \e[1m$rn\e[0m cluster resource [y/N] : "
        read removeConfig
        if [[ "$removeConfig" == "y" ]]; then
            rm -f $resourceDirLocal/$rn.yml &>/dev/null
            echo -e "\e[1m\e[91mReset\e[0m cluster resource \e[1m$rn\e[0m"
        else
            exit
        fi
    fi
    if [[ $sourceFile =~ ^http.* ]]; then
        curl --head --silent --fail $sourceFile &>/dev/null
        if [[ $? == 0 ]]; then
            curl -s $sourceFile > $resourceDirLocal/$rn.yml
        echo -e "\e[1m\e[32mCreated\e[0m cluster resource \e[1m$rn\e[0m from \e[1m$sourceFile\e[0m"
        else
            echo -e "\e[1m\e[31mCould not download\e[0m remote \e[1m$sourceFile\e[0m"
        fi
    elif [[ -r "$sourceFile" ]]; then
        cat "$sourceFile" > $resourceDirLocal/$rn.yml
        echo -e "\e[1m\e[32mCreated\e[0m cluster resource \e[1m$rn\e[0m from \e[1m$sourceFile\e[0m"
    else
        echo -e "\e[1m\e[31mCould not read\e[0m file \e[1m$sourceFile\e[0m"
    fi
}

# edit cluster resource configuration
function doResourceEdit {
    local rn=$1
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    echo -e "\e[1m\e[33mEditing\e[0m the cluster resource \e[1m$rn\e[0m"
    local resourceDirLocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES
    if [[ -r $resourceDirLocal/$rn.yml ]]; then
        vi $resourceDirLocal/$rn.yml
        echo -e "\e[1m\e[33mUpdated\e[0m cluster resource \e[1m$rn\e[0m"
    else
        echo -e "\e[1m\e[31mCould not read\e[0m file \e[1m$rn.yml\e[0m in $resourceDirLocal"
    fi
}

# delete cluster resource configuration
function doResourceDelete {
    local rn=$1
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    echo -e "\e[1m\e[31mDeleting\e[0m the cluster resource \e[1m$rn\e[0m"
    local resourceDirLocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES
    if [[ -r $resourceDirLocal/$rn.yml ]]; then
        rm -f $resourceDirLocal/$rn.yml
        echo -e "\e[1m\e[31mDeleted\e[0m cluster resource \e[1m$rn\e[0m"
    else
        echo -e "\e[1m\e[31mCould not find\e[0m file \e[1m$rn.yml\e[0m in $resourceDirLocal"
    fi
}

# information cluster resource configuration
function doResourceInfo {
    local rn=$1
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    echo -e "\e[1m\e[34mInfo\e[0m about the cluster resource \e[1m$rn\e[0m"
    local resourceDirLocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES
    local resourceDirShared=$SXCM_RESOURCES_PATH
    local LIST=$(listClusterConfigs)
    local COUNT=$(echo $LIST | wc -w)
    if [[ -r $resourceDirLocal/$rn.yml || -d $resourceDirLocal/$rn ]]; then
        if [[ -r $resourceDirLocal/$rn.yml ]]; then
            echo "format     :  yaml"
            echo "kind       :  local"
            echo "location   :  $resourceDirLocal/$rn.yml"
            echo "title      : " $(extractResourceTitle $resourceDirLocal/$rn.yml)
            echo "description: " $(extractResourceDescription $resourceDirLocal/$rn.yml)
        else
            echo "format     :  directory"
            echo "kind       :  local"
            echo "location   :  $resourceDirLocal/$rn"
            echo "title      : " $(extractResourceTitle $resourceDirLocal/$rn)
            echo "description: " $(extractResourceDescription $resourceDirLocal/$rn)
        fi
    elif [[ -r $resourceDirShared/$rn.yml || -d $resourceDirShared/$rn ]]; then
        if [[ -r $resourceDirShared/$rn.yml ]]; then
            echo "format     :  yaml"
            echo "kind       :  shared"
            echo "location   :  $resourceDirShared/$rn.yml"
            echo "title      : " $(extractResourceTitle $resourceDirShared/$rn.yml)
            echo "description: " $(extractResourceDescription $resourceDirShared/$rn.yml)
        else
            echo "format     :  directory"
            echo "kind       :  shared"
            echo "location   :  $resourceDirShared/$rn"
            echo "title      : " $(extractResourceTitle $resourceDirShared/$rn)
            echo "description: " $(extractResourceDescription $resourceDirShared/$rn)
        fi
    else
        echo -e "\e[1m\e[31mCould not read\e[0m file \e[1m$rn.yml\e[0m in $resourceDirLocal or $resourceDirShared"
        exit 1
    fi
    if [[ $COUNT -gt 0 ]]; then
        for cluster in $LIST
        do
            local resourceIsFoundInOCPInstall="false"
            for resource in $(extractOCPInstallResourceList $(getOCPInstallFileForCluster $cluster)); do
                if [[ "$resource" == "$rn" ]]; then
                    resourceIsFoundInOCPInstall="true"
                fi
            done
            if [[ "$resourceIsFoundInOCPInstall" == "true" ]]; then
                echo -e "- \e[96menabled\e[0m  in cluster \e[1m$cluster\e[0m"
            else
                echo -e "- \e[95mdisabled\e[0m in cluster \e[1m$cluster\e[0m"
            fi
        done
    fi
    exit


}

# associate cluster resource configuration
function doResourceAssociate {
    local rn=$1
    local cn=$2
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    if [[ $cn == '' ]]; then
        cn=$(getActiveCluster)
    fi
    localConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    localResourceDir=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local resourceIsFoundInOCPInstall="false"
    local resourceIsFoundInResourceDir="false"
    local resourceNewResourceListForOCPInstall=""
    localConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    if [[ ! -r $clusterConfOCPInstallFile ]]; then
        echo -e "No cluster config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading the \e[1m$cn\e[0m cluster resources"
    else
        for resource in $(extractOCPInstallResourceList $clusterConfOCPInstallFile); do
            if [[ "$resource" == "$rn" ]]; then
                resourceIsFoundInOCPInstall="true"
            fi
            resourceNewResourceListForOCPInstall="$resourceNewResourceListForOCPInstall$resource,"
        done
        for resource in $(listResourcesCluster $cn); do
            if [[ "$resource" == "$rn" ]]; then
                resourceIsFoundInResourceDir="true"
            fi
        done
        if [[ "$resourceIsFoundInOCPInstall" == "true" ]]; then
            echo -e "\e[1m\e[31mCould not activate\e[0m cluster resource \e[1m$rn\e[0m to cluster \e[1m$cn\e[0m because this resource already exist"
        else
            resourceNewResourceListForOCPInstall="$resourceNewResourceListForOCPInstall$rn"
            sed -i "/    clusterconfig/c\    clusterconfig: $resourceNewResourceListForOCPInstall" $clusterConfOCPInstallFile
            echo -e "\e[1m\e[96mAssociate\e[0m the cluster resource \e[1m$rn\e[0m with the cluster \e[1m$cn\e[0m"
        fi
        if [[ "$resourceIsFoundInResourceDir" == "false" ]]; then
            local resourceDirLocal=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES
            local resourceDirShared=$SXCM_RESOURCES_PATH
            if [[ -r $resourceDirLocal/$rn.yml || -d $resourceDirLocal/$rn ]]; then
                if [[ -r $resourceDirLocal/$rn.yml ]]; then
                    cp $resourceDirLocal/$rn.yml $clusterResourceDir/$rn.yml &>/dev/null
                    echo -e "\e[1m\e[90mCopy\e[0m \e[1mlocal\e[0m cluster resource \e[1m$rn\e[0m (yaml) to cluster \e[1m$cn\e[0m"
                else
                    cp -r $resourceDirLocal/$rn $clusterResourceDir/$rn &>/dev/null
                    echo -e "\e[1m\e[90mCopy\e[0m \e[1mlocal\e[0m cluster resource \e[1m$rn\e[0m (directory) to cluster \e[1m$cn\e[0m"
                fi
            elif [[ -r $resourceDirShared/$rn.yml || -d $resourceDirShared/$rn ]]; then
                if [[ -r $resourceDirShared/$rn.yml ]]; then
                    cp $resourceDirShared/$rn.yml $clusterResourceDir/$rn.yml &>/dev/null
                    echo -e "\e[1m\e[90mCopy\e[0m \e[1mshared\e[0m cluster resource \e[1m$rn\e[0m (yaml) to cluster \e[1m$cn\e[0m"
                else
                    cp -r $resourceDirShared/$rn $clusterResourceDir/$rn &>/dev/null
                    echo -e "\e[1m\e[90mCopy\e[0m \e[1mshared\e[0m cluster resource \e[1m$rn\e[0m (directory) to cluster \e[1m$cn\e[0m"
                fi
            fi
        fi
        cd $clusterConfDir &>/dev/null
        git add . &>/dev/null
        git commit -am "[$cn] Associate the $rn cluster resource to the $cn cluster" &>/dev/null
        git push origin $cn &> /dev/null
        cd - &>/dev/null
    fi
}

# dissociate cluster resource configuration
function doResourceDissociate {
    local rn=$1
    local cn=$2
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    if [[ $cn == '' ]]; then
        cn=$(getActiveCluster)
    fi
    localConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    localResourceDir=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local resourceIsFoundInOCPInstall="false"
    local resourceNewResourceListForOCPInstall=""
    localConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    if [[ ! -r $clusterConfOCPInstallFile ]]; then
        echo -e "\e[1mNo cluster\e[0m config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading the \e[1m$cn\e[0m cluster resources"
    else
        for resource in $(extractOCPInstallResourceList $clusterConfOCPInstallFile); do
            if [[ "$resource" == "$rn" ]]; then
                resourceIsFoundInOCPInstall="true"
            else
                resourceNewResourceListForOCPInstall="$resourceNewResourceListForOCPInstall$resource,"
            fi
        done
        if [[ "$resourceIsFoundInOCPInstall" == "true" ]]; then
            resourceNewResourceListForOCPInstall="${resourceNewResourceListForOCPInstall::-1}"
            sed -i "/    clusterconfig/c\    clusterconfig: $resourceNewResourceListForOCPInstall" $clusterConfOCPInstallFile
            echo -e "\e[1m\e[95mDissociate\e[0m the cluster resource \e[1m$rn\e[0m from the cluster \e[1m$cn\e[0m"
        else
            echo -e "\e[1mNothing to do\e[0m because the cluster resource \e[1m$rn\e[0m is not present in cluster \e[1m$cn\e[0m"
        fi
        cd $clusterConfDir &>/dev/null
        git add . &>/dev/null
        git commit -am "[$cn] Dissociate the $rn cluster resource from the $cn cluster" &>/dev/null
        git push origin $cn &> /dev/null
        cd - &>/dev/null
    fi
}

# enable cluster resource configuration
function doResourceEnable {
    local rn=$1
    local cn=$2
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    if [[ $cn == '' ]]; then
        cn=$(getActiveCluster)
    fi
    localConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    localResourceDir=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local resourceIsFoundInOCPInstall="false"
    local resourceIsFoundInResourceDir="false"
    local resourceNewResourceListForOCPInstall=""
    localConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    local IsDeployed=false
    if [[ ! -r $clusterConfOCPInstallFile ]]; then
        echo -e "\e[1mNo cluster\e[0m config found at \e[1m$clusterConfOCPInstallFile\e[0m for enabling the \e[1m$rn\e[0m cluster resources"
    else
        echo -e "\e[1m\e[96mEnable\e[0m the cluster resource \e[1m$rn\e[0m with the cluster \e[1m$cn\e[0m"
        doResourceAssociate $rn $cn
        if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]] && [[ -r $clusterConfDir/deployed ]]
        then
            IsDeployed=true
        fi
        if [[ "$IsDeployed" == "true" ]]
        then
            applyClusterResource "update" $cn $rn
            cd $clusterConfDir &>/dev/null
            git add . &>/dev/null
            git commit -am "[$cn] Enable the $rn cluster resource from the $cn cluster" &>/dev/null
            git push origin $cn &> /dev/null
            cd - &>/dev/null
        else
            echo -e "Could not \e[1menable $rn\e[0m cluster resource on cluster \e[1m$cn\e[0m because cluster is \e[1m\e[35mnot deployed\e[0m"
        fi
    fi
}

# disable cluster resource configuration
function doResourceDisable {
    local rn=$1
    local cn=$2
    if [[ "$rn" == "" ]]; then
        echo -en "Resource name [myresource] : "
        read rn
        if [[ $rn == '' ]]; then
            rn="myresource"
        fi
    fi
    if [[ $cn == '' ]]; then
        cn=$(getActiveCluster)
    fi
    localConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    localResourceDir=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local resourceIsFoundInOCPInstall="false"
    local resourceNewResourceListForOCPInstall=""
    localConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    local IsDeployed=false
    if [[ ! -r $clusterConfOCPInstallFile ]]; then
        echo -e "No cluster config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading the \e[1m$cn\e[0m cluster resources"
    else
        if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]] && [[ -r $clusterConfDir/deployed ]]
        then
            IsDeployed=true
        fi
        echo -e "\e[1m\e[95mDisable\e[0m the cluster resource \e[1m$rn\e[0m with the cluster \e[1m$cn\e[0m"
        if [[ "$IsDeployed" == "true" ]]
        then
            applyClusterResource "delete" $cn $rn
        else
            echo -e "Could not \e[1mdisable $rn\e[0m cluster resource on cluster \e[1m$cn\e[0m because cluster is \e[1m\e[35mnot deployed\e[0m"
        fi
        doResourceDissociate $rn $cn
        cd $clusterConfDir &>/dev/null
        git add . &>/dev/null
        git commit -am "[$cn] Disable the $rn cluster resource from the $cn cluster" &>/dev/null
        git push origin $cn
        cd - &>/dev/null
    fi
}

###################

# sub-menu for create command
function menuResourceCreate {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" || "$2" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource create sub-command to create a new cluster resource into the local resource stack

# Usage

[user@localhost]$ sxcm resource create RESOURCENAME FILE


# Examples

# Create a cluster resource named mycluster with the content from the ./myresource.yml local file
sxcm resource create myresource ./myresource.yml

EOF
    else
        doResourceCreate $1 $2
    fi
}

# sub-menu for info command
function menuResourceInfo {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource info sub-command to read detail from a cluster resource stored into the local resource stack

# Usage

[user@localhost]$ sxcm resource info RESOURCENAME


# Examples

# Read a cluster resource info from the local resource stack
sxcm resource info myresource

EOF
    else
        doResourceInfo $1 $2
    fi
}

# sub-menu for edit command
function menuResourceEdit {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource edit sub-command to change content of a cluster resource stored into the local resource stack

# Usage

[user@localhost]$ sxcm resource edit RESOURCENAME


# Examples

# Start editor on mycluster cluster resource and record change into the local resource stack
sxcm resource edit myresource

EOF
    else
        doResourceEdit $1 $2
    fi
}

# sub-menu for delete command
function menuResourceDelete {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource delete sub-command to change content of a cluster resource stored into the local resource stack

# Usage

[user@localhost]$ sxcm resource delete RESOURCENAME


# Examples

# Remove the mycluster cluster resource from the local resource stack
sxcm resource delete myresource

EOF
    else
        doResourceDelete $1 $2
    fi
}

# sub-menu for associate command
function menuResourceAssociate {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource associate sub-command to add a cluster resource into a cluster configuration

# Usage

[user@localhost]$ sxcm resource associate RESOURCENAME [CLUSTERNAME]


# Examples

# Associate the myresource cluster resource (local or shared) with the currently active cluster
sxcm resource associate myresource
# Associate the myresource cluster resource (local or shared) with the mycluster cluster
sxcm resource associate myresource mycluster

EOF
    else
        doResourceAssociate $1 $2
    fi
}

# sub-menu for dissociate command
function menuResourceDissociate {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource dissociate sub-command to remove a cluster resource into a cluster configuration

# Usage

[user@localhost]$ sxcm resource dissociate RESOURCENAME [CLUSTERNAME]


# Examples

# Dissociate the myresource cluster resource (local or shared) with the currently active cluster
sxcm resource dissociate myresource
# Dissociate the myresource cluster resource (local or shared) with the mycluster cluster
sxcm resource dissociate myresource mycluster

EOF
    else
        doResourceDissociate $1 $2
    fi
}

# sub-menu for enable command
function menuResourceEnable {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource enable sub-command to add a cluster resource into a cluster configuration and the running cluster

# Usage

[user@localhost]$ sxcm resource enable RESOURCENAME [CLUSTERNAME]


# Examples

# Enable the myresource cluster resource (local or shared) with the currently active cluster
sxcm resource enable myresource
# Enable the myresource cluster resource (local or shared) with the mycluster cluster
sxcm resource enable myresource mycluster


EOF
    else
        doResourceEnable $1 $2
    fi
}

# sub-menu for disable command
function menuResourceDisable {
    isPametersContainHelpers $1 $2 $3 $4
    if [[ $? == "0" || "$1" == "" ]]; then
        menuHeadArt
        cat <<EOF

sxcm resource disable sub-command to remove a cluster resource into a cluster configuration and the running cluster

# Usage

[user@localhost]$ sxcm resource disable RESOURCENAME [CLUSTERNAME]


# Examples

# Disable the myresource cluster resource (local or shared) with the currently active cluster
sxcm resource disable myresource
# Disable the myresource cluster resource (local or shared) with the mycluster cluster
sxcm resource disable myresource mycluster


EOF
    else
        doResourceDisable $1 $2
    fi
}

# menu switch for resource usage command
function menuResourceUsage {
    menuHeadArt
    cat <<EOF

This client helps you manage cluster resources availables and their association with configured clusters

Available actions are : list, create, edit, info, enable, disable, associate, dissociate and delete

# Usage

[user@localhost]$ sxcm resource ACTION [options]

# Availables actions

## Cluster resources commands actions (local) :
  - list                                             List available cluster configurations
  - create RESOURCENAME RESOURCEFILE                 Add a new cluster resource to the local resource stack
  - edit RESOURCENAME                                edit a cluster resource (only local)
  - info RESOURCENAME                                Get information about a cluster resource (only local)
  - delete RESOURCENAME                              Remove a cluster resource from the local resource stack
  - associate RESOURCENAME [CLUSTERNAME]             Add a cluster resource into a cluster resource list and record it (default is active cluster)
  - dissociate RESOURCENAME [CLUSTERNAME]            Remove a cluster resource from a cluster resource list and record deletion (default is active cluster)

## Cluster resources commands actions (remote) :
  - enable RESOURCENAME [CLUSTERNAME]                Add a cluster resource into a cluster resource list, record, apply to running cluster and record it (default is active cluster)
  - disable RESOURCENAME [CLUSTERNAME]               Remove a cluster resource from the cluster, record it, remove the cluster resource list and record it (default is active cluster)


# Examples

  sxcm resource list                               # Alias of 'sxcm resources'
  sxcm resource create myresource myresource.yml   # Add the myresource cluster resource to the  local resource stack based on the content of the myresource.yml file
  sxcm resource edit myresource                    # Edit the myresource cluster resource stored into the local resource stack
  sxcm resource info myresource                    # Display info about the myresource cluster resource stored into the local resource stack
  sxcm resource delete  myresource                 # Delete the myresource cluster resource stored into the local resource stack
  sxcm resource associate myresource               # Add the myresource cluster resource into the cluster resource list of the curently active cluster and record it
  sxcm resource associate myresource mycluster     # Add the myresource cluster resource into the mycluster cluster resource list and record it
  sxcm resource dissociate myresource              # Remove the myresource cluster resource from the curently active cluster resource list and record deletion
  sxcm resource dissociate myresource mycluster    # Remove the myresource cluster resource from the mycluster cluster resource list and record deletion
  sxcm resource enable myresource                  # Add the myresource cluster resource into the cluster resource list of the curently active cluster and apply it to the running cluster
  sxcm resource enable myresource mycluster        # Add the myresource cluster resource into the mycluster cluster resource list and apply it to the running cluster
  sxcm resource disable myresource                 # Remove the myresource cluster resource from the curently active cluster resource list and apply it to the running cluster
  sxcm resource disable myresource mycluster       # Remove the myresource cluster resource from the mycluster cluster resource list and apply it to the running cluster

EOF

    exit
}

# sub-menu for resources command
function menuResources {
    isPametersContainHelpers $1 $2
    if [[ $? == "0" || "$1" != "" || "$2" != "" ]]; then
        menuResourceUsage
    else
        doListResources
    fi
}

# main menu for the cluster sub-command
function menuResource {
    case $1 in
    create) menuResourceCreate ${2} ${3} ${4} ;;
    info) menuResourceInfo ${2} ${3} ${4} ;;
    edit) menuResourceEdit ${2} ${3} ${4} ;;
    delete) menuResourceDelete ${2} ${3} ${4} ;;
    list) menuResources ${2} ${3} ${4} ;;
    associate) menuResourceAssociate ${2} ${3} ${4} ;;
    dissociate) menuResourceDissociate ${2} ${3} ${4} ;;
    enable) menuResourceEnable ${2} ${3} ${4} ;;
    disable) menuResourceDisable ${2} ${3} ${4} ;;
    *) menuResourceUsage ;;
    esac
}
