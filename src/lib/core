#!/bin/bash

# Check if config file exist
function CheckConfigExist {
    if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE ]]; then
        return 0;
    else
        return 1;
    fi
}

# Check if cluster config exist
function CheckConfigClusterExist {
    if [[ -d $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER ]]; then
        return 0;
    else
        return 1;
    fi
}

# Check if config exist and create otherwise
function CheckConfigOrCreate {
    if CheckConfigExist; then
        echo "Using configuration $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE"
    else
        echo "Creating configuration $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE"
        mkdir -p $SXCM_USER_CONF_DIR &> /dev/null
        touch $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
    fi
}

# Check if cluster config exist and create otherwise
function CheckConfigClusterOrCreate {
    if CheckConfigClusterExist; then
        echo "Using cluster configuration $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER"
    else
        echo "Creating cluster configuration $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER"
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER &> /dev/null
        touch $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$SXCM_USER_CONF_FILE
    fi
}

# Create and load configuration files
function LoadConfig {
    if ! CheckConfigExist; then
        CheckConfigOrCreate
    fi
    reloadConf
    if ! CheckConfigClusterExist; then
        CheckConfigClusterOrCreate
    fi
    reloadClusterConf
    if [[ ! -z "${SXCM_ENV}" ]]; then
        SXCM_ENV="dev"
    fi
}

# append key to conf
function appendConf {
    echo "$1=$2" >> $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
    export $1=$2
}

# reload conf file
function reloadConf {
    source $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
}

# append key to cluster conf
function appendClusterConf {
    echo "$1=$2" >> $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$SXCM_USER_CONF_FILE
    export $1=$2
}

# reload cluster conf file
function reloadClusterConf {
    source $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$SXCM_USER_CONF_FILE
}

# temporize with a balanced sleep
function temporize {
    x=$1
    echo "temporize during ${x}sec"
    while [ $x -gt 0 ]
    do
        sleep $2
        x=$(( $x - $2 ))
        echo "wait for ${x}sec..."
    done
}



# router for version sub-command
function menuVersion {
    echo "sxcm version : $SXCM_VERSION"
    echo -n "Openshift : "
    oc version 
    echo -n "Helm : "
    helm version --short
}

# menu switch for usage command
function menuUsage {
    menuHeadArt
cat <<EOF

This client helps you configure and deploy multiple Openshift cluster under a AWS environment.

Available actions are : list, create, info, update, delete, profiles, current, switch, connect, deploy  and destroy

Usage:
  sxcm <action> [flags]

- Clusters management actions (local) :
  - list                                List available cluster configurations
  - profiles                            List available cluster profiles
  - current                             Return informations about the current cluster
  - switch                              Change the current cluster

- Cluster commands actions (remote) :
  - create                              Add a new cluster configuration to the cluster stack
  - edit                                change the cluster configuration (should require destroy one major change)
  - info                                Get information about a cluster configuration
  - update                              Update a cluster configuration
  - delete                              Remove a cluster configuration from the cluster stack
  - connect                             Connect to the given cluster (default is current cluster)
  - deploy                              Deploy the given cluster (default is current cluster)
  - destroy                             Deploy the given cluster (default is current cluster)

- Examples  :
  sxcm  list                            List available cluster configurations
  sxcm  profiles                        List available cluster profiles
  sxcm  create myClusterName <profile>  Create an new Openshift cluster based on profile (default is default profile)
  sxcm  switch myClusterName            Change the current cluster to my-example
  sxcm  edit                            Edit the Openshift cluster configuration (default is current cluster)
  sxcm  info                            Display info about the my-example cluster (default is current cluster)
  sxcm  deploy                          Deploy the my-example cluster (default is current cluster)
  sxcm  update                          Update the my-example cluster configuration (default is current cluster)
  sxcm  destroy                         Destroy the my-example cluster (default is current cluster)
  sxcm  connect                         Connect the local kubeconfig to the my-example cluster
  sxcm  delete                          Delete the my-example cluster configuration (default is current cluster)
  sxcm  current                         Return informations about the current cluster

EOF
}


# menu display AsciiArt
function menuHeadArt {
cat $SXCM_PATH/header.txt
}
