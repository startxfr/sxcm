#!/bin/bash

# Check if config file exist
function CheckConfigExist {
    if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE ]]; then
        return 0;
    else
        return 1;
    fi
}

# Check if cluster config exist
function CheckConfigClusterExist {
    if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE ]]; then
        return 0;
    else
        return 1;
    fi
}

# Check if config exist and create otherwise
function CheckConfigOrCreate {
    if CheckConfigExist; then
        echo -e "\e[36mUsing\e[0m user configuration file at $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE"
    else
        echo -e "\e[32mCreating\e[0m user configuration file at $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE"
        mkdir -p $SXCM_USER_CONF_DIR &> /dev/null
        touch $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER &> /dev/null
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES &> /dev/null
    fi
}

# Create and load configuration files
function LoadConfig {
    if ! CheckConfigExist; then
        CheckConfigOrCreate
    fi
    reloadConf
    if [[ ! -z "${SXCM_ENV}" ]]; then
        SXCM_ENV="dev"
    fi
}

# append key to conf
function appendConf {
    echo "$1=$2" >> $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
    export $1=$2
}

# reload conf file
function reloadConf {
    source $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
}

# append key to cluster conf
function appendClusterConf {
    local clusterName=`getActiveCluster`
    appendIndividualClusterConf $clusterName $1 $2
}

# reload cluster conf file
function reloadClusterConf {
    local clusterName=`getActiveCluster`
    reloadIndividualClusterConf $clusterName
}

# temporize with a balanced sleep
function temporize {
    x=$1
    echo "temporize during ${x}sec"
    while [ $x -gt 0 ]
    do
        sleep $2
        x=$(( $x - $2 ))
        echo "wait for ${x}sec..."
    done
}

# append key to individual cluster conf
function appendIndividualClusterConf {
    if ! CheckConfigClusterExist $1; then
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1 &> /dev/null
        touch $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE &> /dev/null
    fi
    echo "$2=$3" >> $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE
    export $2=$3
}

# reload cluster conf file
function reloadIndividualClusterConf {
    if CheckConfigClusterExist $1; then
        source $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE
    else
        echo -e "\e[31mCould not found\e[0m cluster \e[1m$1\e[0m configuration directory at $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1"
    fi
}

# load active cluster conf file
function loadActiveClusterConf {
    reloadIndividualClusterConf `getActiveCluster`
}

# get active cluster configuration
function getActiveCluster {
    echo $SXCM_CLUSTER_ACTIVE
}

# set active cluster configuration
function setActiveCluster {
    local NAME=${1,,}
    if [[ "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                appendConf SXCM_CLUSTER_ACTIVE $NAME
                export SXCM_CLUSTER_ACTIVE=$NAME
                echo -e "\e[32mSet\e[0m active cluster to \e[1m$NAME\e[0m"
                return 0
            fi
        done
    else 
       echo -e "\e[31mWarning\e[0m could not set active cluster with empty name"
    fi
}

# menu switch for usage command
function menuUsage {
    menuHeadArt
cat <<EOF

This client helps you configure and deploy multiple Openshift cluster under a AWS environment.

Available actions are : list, create, info, update, delete, profiles, current, switch, connect, deploy and destroy

# Usage

[user@localhost]$ sxcm ACTION [options]

# Availables actions

## Clusters management actions (local) :
  - list                                             List available cluster configurations
  - profiles                                         List available cluster profiles
  - current [CLUSTERNAME]                            Change the current cluster
  - switch [CLUSTERNAME]                             Alias of the current action

## Cluster commands actions (local) :
  - create CLUSTERNAME [PROFILE]                     Add a new cluster configuration to the cluster stack
  - edit [CLUSTERNAME]                               Change the cluster configuration (should require destroy one major change)
  - info [CLUSTERNAME]                               Get information about a cluster configuration
  - delete [CLUSTERNAME]                             Remove a cluster configuration from the cluster stack

## Cluster commands actions (remote) :
  - update [CLUSTERNAME]                             Update a cluster configuration
  - connect [CLUSTERNAME]                            Connect to the given cluster (default is current cluster)
  - deploy [CLUSTERNAME]                             Deploy the given cluster (default is current cluster)
  - destroy [CLUSTERNAME]                            Deploy the given cluster (default is current cluster)

## Cluster resources commands actions (local) :
  - resources                                        List available cluster configurations
  - resource create RESOURCENAME RESOURCEFILE        Add a new cluster resource to the local cluster resource stack
  - resource edit RESOURCENAME                       edit a cluster resource (only local)
  - resource info RESOURCENAME                       Get information about a cluster resource (only local)
  - resource delete RESOURCENAME                     Remove a cluster resource from the local cluster resource stack
  - resource associate RESOURCENAME [CLUSTERNAME]    Add a cluster resource into a cluster resource list and record it (default is active cluster)
  - resource dissociate RESOURCENAME [CLUSTERNAME]   Remove a cluster resource from a cluster resource list and record deletion (default is active cluster)

## Cluster resources commands actions (remote) :
  - resource enable RESOURCENAME [CLUSTERNAME]       Add a cluster resource into a cluster resource list, record, apply to running cluster and record it (default is active cluster)
  - resource disable RESOURCENAME [CLUSTERNAME]      Remove a cluster resource from the cluster, record it, remove the cluster resource list and record it (default is active cluster)


# Examples

  sxcm list                                        # List available cluster configurations
  sxcm profiles                                    # List available cluster profiles
  sxcm create mycluster <profile>                  # Create an new Openshift cluster based on profile (default is default profile)
  sxcm switch mycluster                            # Change the current cluster to my-example
  sxcm edit                                        # Edit the Openshift cluster configuration (default is current cluster)
  sxcm info                                        # Display info about the my-example cluster (default is current cluster)
  sxcm deploy                                      # Deploy the my-example cluster (default is current cluster)
  sxcm update                                      # Update the my-example cluster configuration (default is current cluster)
  sxcm destroy                                     # Destroy the my-example cluster (default is current cluster)
  sxcm connect                                     # Connect the local kubeconfig to the my-example cluster
  sxcm delete                                      # Delete the my-example cluster configuration (default is current cluster)
  sxcm current                                     # Return informations about the current cluster
  sxcm resources                                   # List available cluster profiles
  sxcm resource list                               # Alias of `sxcm resources`
  sxcm resource create myresource myresource.yml   # Add the myresource cluster resource to the  local cluster resource stack based on the content of the myresource.yml file
  sxcm resource edit myresource                    # Edit the myresource cluster resource stored into the local cluster resource stack
  sxcm resource info myresource                    # Display info about the myresource cluster resource stored into the local cluster resource stack
  sxcm resource delete  myresource                 # Delete the myresource cluster resource stored into the local cluster resource stack
  sxcm resource associate myresource               # Add the myresource cluster resource into the cluster resource list of the curently active cluster and record it
  sxcm resource associate myresource mycluster     # Add the myresource cluster resource into the mycluster cluster resource list and record it
  sxcm resource dissociate myresource              # Remove the myresource cluster resource from the curently active cluster resource list and record deletion
  sxcm resource dissociate myresource mycluster    # Remove the myresource cluster resource from the mycluster cluster resource list and record deletion
  sxcm resource enable myresource                  # Add the myresource cluster resource into the cluster resource list of the curently active cluster and apply it to the running cluster
  sxcm resource enable myresource mycluster        # Add the myresource cluster resource into the mycluster cluster resource list and apply it to the running cluster
  sxcm resource disable myresource                 # Remove the myresource cluster resource from the curently active cluster resource list and apply it to the running cluster
  sxcm resource disable myresource mycluster       # Remove the myresource cluster resource from the mycluster cluster resource list and apply it to the running cluster

EOF
}


# menu display AsciiArt
function menuHeadArt {
cat $SXCM_PATH/header.txt
}