#!/bin/bash

# Check if config file exist
function CheckConfigExist {
    if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE ]]; then
        return 0;
    else
        return 1;
    fi
}

# Check if cluster config exist
function CheckConfigClusterExist {
    if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE ]]; then
        return 0;
    else
        return 1;
    fi
}

# Check if config exist and create otherwise
function CheckConfigOrCreate {
    if CheckConfigExist; then
        echo -e "\e[36mUsing\e[0m user configuration file at $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE"
    else
        echo -e "\e[32mCreating\e[0m user configuration file at $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE"
        mkdir -p $SXCM_USER_CONF_DIR &> /dev/null
        touch $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER &> /dev/null
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES &> /dev/null
    fi
}

# Create and load configuration files
function LoadConfig {
    if ! CheckConfigExist; then
        CheckConfigOrCreate
    fi
    reloadConf
    if [[ ! -z "${SXCM_ENV}" ]]; then
        SXCM_ENV="dev"
    fi
}

# append key to conf
function appendConf {
    echo "$1=$2" >> $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
    export $1=$2
}

# reload conf file
function reloadConf {
    source $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_FILE
}

# append key to cluster conf
function appendClusterConf {
    local clusterName=`getActiveCluster`
    appendIndividualClusterConf $clusterName $1 $2
}

# reload cluster conf file
function reloadClusterConf {
    local clusterName=`getActiveCluster`
    reloadIndividualClusterConf $clusterName
}

# temporize with a balanced sleep
function temporize {
    x=$1
    echo "temporize during ${x}sec"
    while [ $x -gt 0 ]
    do
        sleep $2
        x=$(( $x - $2 ))
        echo "wait for ${x}sec..."
    done
}

# append key to individual cluster conf
function appendIndividualClusterConf {
    if ! CheckConfigClusterExist $1; then
        mkdir -p $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1 &> /dev/null
        touch $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE &> /dev/null
    fi
    echo "$2=$3" >> $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE
    export $2=$3
}

# reload cluster conf file
function reloadIndividualClusterConf {
    if CheckConfigClusterExist $1; then
        source $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1/$SXCM_USER_CONF_FILE
    else
        echo -e "\e[31mCould not found\e[0m cluster \e[1m$1\e[0m configuration directory at $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$1"
    fi
}

# load active cluster conf file
function loadActiveClusterConf {
    reloadIndividualClusterConf `getActiveCluster`
}

# get active cluster configuration
function getActiveCluster {
    echo $SXCM_CLUSTER_ACTIVE
}

# set active cluster configuration
function setActiveCluster {
    local NAME=${1,,}
    if [[ "" != $NAME ]]
    then
        local LIST=$(getClusterConfigurationList)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                appendConf SXCM_CLUSTER_ACTIVE $NAME
                export SXCM_CLUSTER_ACTIVE=$NAME
                echo -e "\e[32mSet\e[0m active cluster to \e[1m$NAME\e[0m"
                return 0
            fi
        done
    else 
       echo -e "\e[31mWarning\e[0m could not set active cluster with empty name"
    fi
}

# menu switch for usage command
function menuUsage {
    menuHeadArt
cat <<EOF

This client helps you configure and deploy multiple Openshift cluster under a AWS environment.

Available actions are : list, create, info, update, delete, profiles, current, switch, connect, deploy  and destroy

Usage:
  sxcm <action> [flags]

- Clusters management actions (local) :
  - list                                List available cluster configurations
  - profiles                            List available cluster profiles
  - current                             Return informations about the current cluster
  - switch                              Change the current cluster
  - resource                            Management of the availables cluster resource

- Cluster commands actions (remote) :
  - create                              Add a new cluster configuration to the cluster stack
  - edit                                change the cluster configuration (should require destroy one major change)
  - info                                Get information about a cluster configuration
  - update                              Update a cluster configuration
  - delete                              Remove a cluster configuration from the cluster stack
  - connect                             Connect to the given cluster (default is current cluster)
  - deploy                              Deploy the given cluster (default is current cluster)
  - destroy                             Deploy the given cluster (default is current cluster)

- Examples  :
  sxcm list                            List available cluster configurations
  sxcm profiles                        List available cluster profiles
  sxcm create mycluster <profile>      Create an new Openshift cluster based on profile (default is default profile)
  sxcm switch mycluster                Change the current cluster to my-example
  sxcm edit                            Edit the Openshift cluster configuration (default is current cluster)
  sxcm info                            Display info about the my-example cluster (default is current cluster)
  sxcm deploy                          Deploy the my-example cluster (default is current cluster)
  sxcm update                          Update the my-example cluster configuration (default is current cluster)
  sxcm destroy                         Destroy the my-example cluster (default is current cluster)
  sxcm connect                         Connect the local kubeconfig to the my-example cluster
  sxcm delete                          Delete the my-example cluster configuration (default is current cluster)
  sxcm current                         Return informations about the current cluster

EOF
}


# menu display AsciiArt
function menuHeadArt {
cat $SXCM_PATH/header.txt
}