#!/bin/bash


# Install openshift installer in /usr/local/bin/
function installClusterInstaller {
    echo -e "Start openshift installer \e[32minstallation\e[0m of \e[1m$SXCM_OCPI_RELEASE\e[0m"
    rm -rf $SXCM_OCPI_TMP /tmp/$SXCM_OCPI_PACKAGE &> /dev/null
    mkdir $SXCM_OCPI_TMP &> /dev/null
    cd /tmp &> /dev/null
    echo -e "Downloading \e[1m$SXCM_OCPI_RELEASE\e[0m openshift installer from \e[1m$SXCM_OCPI_BRANCH\e[0m "
    wget $SXCM_OCPI_URL
    echo -e "Unarchive \e[1m$SXCM_OCPI_RELEASE\e[0m openshift installer in \e[1m$SXCM_OCPI_TMP\e[0m"
    mv $SXCM_OCPI_PACKAGE $SXCM_OCPI_TMP/ &> /dev/null
    cd - &> /dev/null
    cd $SXCM_OCPI_TMP &> /dev/null
    tar xzvf $SXCM_OCPI_PACKAGE &> /dev/null
    echo -e "Install binary \e[1m$SXCM_OCPI_RELEASE\e[0m openshift installer in \e[1m$SXCM_OCPI_BIN\e[0m"
    sudo mv openshift-install $SXCM_OCPI_BIN &> /dev/null
    cd - &> /dev/null
    echo -e "Cleanup of \e[1m$SXCM_OCPI_RELEASE\e[0m openshift installer"
    rm -rf $SXCM_OCPI_TMP /tmp/$SXCM_OCPI_PACKAGE &> /dev/null
    SXCM_OCPI_RELEASE=$(openshift-install version | grep openshift-install | cut -dv -f2)
}

# Install openshift installer if not present in /usr/local/bin/
function installClusterInstallerIfNotPresent {
    if [[ ! -x "$SXCM_OCPI_BIN" ]]; then
        echo -e "Start openshift installer \e[32minstallation\e[0m (no $SXCM_OCPI_BIN)"
        installClusterInstaller
    else
        SXCM_OCPI_RELEASE=$(openshift-install version | grep openshift-install | cut -dv -f2)
    fi
}

# get list cluster configuration
function listClusterConfigs {
    local LIST=$(ls -d $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/*/ 2>/dev/null)
    local COUNT=$(echo $LIST | wc -w)
    local OUT=""
    if [[ $COUNT -gt 0 ]]; then
        for configuration in $LIST
        do
            foo=${configuration#"$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/"}
            foo=${foo%"/"}
            OUT="${OUT} ${foo}"
        done
        echo $OUT
    fi
}

# read the content of the cluster description in an install-config.yaml
function extractOCPInstallDescription {
    local descClusterConfig=$(grep -A0 -P '^    descriptionClusterconfig:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
    local desc=$(grep -A0 -P '^    description:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
    if [[ $2 == 'desc' ]]
    then
        echo "$desc"
    elif [[ $2 == 'service' ]]
    then
        echo "$descClusterConfig"
    else
        echo "$desc - $descClusterConfig"
    fi
}

# read the content of multiple fields in an install-config.yaml and render a single line for tab display
function extractOCPInstallDescriptionTab {
    local descClusterConfig=$(grep -A0 -P '^    descriptionClusterconfig:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
    local desc=$(grep -A0 -P '^    descriptionTab:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
    local hcost=$(extractOCPInstallHourlyCost $1)
    echo "$desc | $hcost | $descClusterConfig"
}

# read the content of the cluster hourlyCost in an install-config.yaml
function extractOCPInstallHourlyCost {
    echo $(grep -A0 -P '^    hourlyCost:' $1 | cut -d: -f2 | sed -r 's/["]+//g')
}

# read the content of the cluster clusterconfig in an install-config.yaml
function extractOCPInstallResourceList {
    echo $(grep -A0 -P '^    clusterconfig:'  $1 | cut -d: -f2 | tr "," "\n")
}

# read the content of the cluster aws.region in an install-config.yaml
function extractOCPInstallAWSRegion {
    echo $(cat $1 | yq .platform.aws.region -cr)
}

# read the content of the cluster aws.region in an install-config.yaml
function extractOCPInstallProfile {
    echo $(cat $1 | yq .platform.aws.userTags.profile -cr)
}

# return the full path to the install-config.yaml (or back) for a given cluster
function getOCPInstallFileForCluster {
    local cn=$1
    local confDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local confFile=$confDir/install-config.yaml
    if [[ ! -r $confFile && -r $confFile.back ]]
    then
        confFile=$confFile.back
    fi
    echo "$confFile"
}

# create cluster resources
function updateClusterResources {
    local cn=$1
    echo -e "Cluster \e[1m$cn\e[0m : \e[32mUpdate\e[0m the cluster resources \e[93m(admin)\e[0m"
    doClusterConfigurationCreateUpdateResources $cn 
    doUpsertClusterResources update $cn
}

# create cluster resources
function createClusterResources {
    local cn=$1
    echo -e "Cluster \e[1m$cn\e[0m : \e[32mCreate\e[0m the cluster resources \e[93m(admin)\e[0m"
    doClusterConfigurationCreateUpdateResources $cn 
    doUpsertClusterResources create $cn
}

# create demos
function updateClusterDemos {
    local cn=$1
    echo -e "Cluster \e[1m$cn\e[0m : \e[32mUpdate\e[0m the demos \e[93m(admin)\e[0m"
    doClusterConfigurationCreateUpdateDemos $cn 
    doUpsertClusterDemos update $cn
}

# create demos
function createClusterDemos {
    local cn=$1
    echo -e "Cluster \e[1m$cn\e[0m : \e[32mCreate\e[0m the demos \e[93m(admin)\e[0m"
    doClusterConfigurationCreateUpdateDemos $cn 
    doUpsertClusterDemos create $cn
}

# create cluster resources
function applyClusterResource {
    local UPSERT=$1
    local cn=$2
    local rn=$3
    local clusterConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    local localEnv=${SXCM_ENV:-dev}
    local localVersion=${SXCM_VERSION:-beta}
    local localScope=${SXCM_CLUSTER_SCOPE:-scope}
    local localToken=${SXCM_CLUSTER_ADMIN_TOKEN:-mytoken} 
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirResource=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local clusterRegion=$(extractOCPInstallAWSRegion $clusterConfOCPInstallFile)
    local clusterProfile=$(extractOCPInstallProfile $clusterConfOCPInstallFile)
    local clusterID=$(oc get machineset -n openshift-machine-api -o jsonpath="{.items[0].metadata.labels}" | cut -d \" -f 4)
    local clusterName=$(echo $SXCM_CLUSTER_URL | sed -e 's|https://||g')
    clusterName=$(echo $clusterName | sed -e 's|\.|-|g')
    local CLUSTERTIMEOUT=5
    local CMD="oc apply $SXCM_OCAPPLY_OPTS --token=$localToken --cluster=$clusterName -f -"
    if [[ $UPSERT == "delete" ]]
    then
        CMD="oc delete -f -"
    fi
    if [[ -r $clusterConfDirResource/$rn.yml ]]
    then
        CLUSTERTIMEOUT=$(extractResourceTimeout $clusterConfDirResource/$rn.yml)
        echo -e "${UPSERT} \e[1m$rn\e[0m cluster \e[1mresource\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${rn}.yml\e[0m \e[93m(admin)\e[0m"
        if [[ 
              "$rn" == "quay" || 
              "$rn" == "3scale" || 
              "$rn" == "argocd-apps" 
            ]]
        then
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$localEnv \
            -p VERSION=$localVersion \
            -p CLUSTER_PROFILE=$clusterProfile \
            -p RHN_USER=$SXCM_RHN_USER \
            -p RHN_PASSWORD=$SXCM_RHN_PASSWORD \
            | $CMD
        elif [[ 
              "$rn" == "argocd-deploy" || 
              "$rn" == "argocd-deploy-small" 
            ]]
        then
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$SXCM_ENV \
            -p VERSION=$localVersion \
            -p AWS_ZONE=$SXCM_AWS_ZONE \
            -p AWS_ACCESS_ID=$SXCM_AWS_ID \
            -p AWS_ACCESS_KEY=$SXCM_AWS_KEY \
            -p AWS_SMTP_USER=$SXCM_AWS_SMTP_USER \
            -p AWS_SMTP_PASSWORD=$SXCM_AWS_SMTP_PASSWORD \
            -p AWS_SMTP_ZONE=$SXCM_AWS_SMTPZONE \
            -p AWS_SMTP_FROM=$SXCM_AWS_SMTPFROM \
            -p CLUSTER_PROFILE=$clusterProfile \
            | $CMD
        elif [[ "$rn" == "machine" ]]
        then
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$localEnv \
            -p VERSION=$localVersion \
            -p CLUSTERID=$clusterID \
            -p CLUSTER_REGION=$clusterRegion \
            -p CLUSTER_PROFILE=$clusterProfile \
            -p RHN_USER=$SXCM_RHN_USER \
            -p RHN_PASSWORD=$SXCM_RHN_PASSWORD \
            | $CMD
        else
            oc process -f $clusterConfDirResource/$rn.yml --local -o yaml \
            -p SCOPE=$localScope \
            -p CLUSTER=$cn \
            -p ENV=$localEnv \
            -p VERSION=$localVersion \
            -p CLUSTER_PROFILE=$clusterProfile \
            | $CMD
        fi
        if [[ "${UPSERT}" == "create" ]]; then
            echo -e "wait ${CLUSTERTIMEOUT}sec for operator dependencies start"
            temporize $CLUSTERTIMEOUT 5
        else
            echo -e "wait 5sec for operator dependencies update"
            temporize 2 1
        fi
    fi
    if [[ -d $clusterConfDirResource/$rn ]]
    then
        local ressscript="upsert.sh"
        if [[ -x $clusterConfDirResource/$rn/$ressscript ]]
        then
            echo -e "${UPSERT} \e[1m$rn\e[0m cluster \e[1mresource\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${ressscript}\e[0m \e[93m(admin)\e[0m"
            . $clusterConfDirResource/$rn/$ressscript "$cn" "$localScope" "$localEnv" "$localVersion" "$localToken" "$cn" "$clusterName"
            if [[ "${UPSERT}" == "create" ]]; then
                echo -e "wait ${CLUSTERTIMEOUT}sec for deployment dependencies start"
                temporize 10 2
            fi
        else 
            echo -e "No \e[1m$rn\e[0m cluster \e[1mresource\e[0m found at \e[1m$clusterConfDirResource/$rn/$ressscript\e[0 or is executable"
        fi
    fi
}

# create demos
function applyClusterDemo {
    local UPSERT=$1
    local cn=$2
    local rn=$3
    local clusterConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    local localEnv=${SXCM_ENV:-dev}
    local localVersion=${SXCM_VERSION:-beta}
    local localScope=${SXCM_CLUSTER_SCOPE:-scope}
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirDemo=$clusterConfDir/$SXCM_USER_CONF_DIR_DEMOS
    local clusterRegion=$(extractOCPInstallAWSRegion $clusterConfOCPInstallFile)
    local clusterProfile=$(extractOCPInstallProfile $clusterConfOCPInstallFile)
    local clusterID=$(oc get machineset -n openshift-machine-api -o jsonpath="{.items[0].metadata.labels}" | cut -d \" -f 4)
    local clusterName=$(echo $SXCM_CLUSTER_URL | sed -e 's|https://||g')
    clusterName=$(echo $clusterName | sed -e 's|\.|-|g')
    local CLUSTERTIMEOUT=5
    local CMD="oc apply $SXCM_OCAPPLY_OPTS --cluster=$clusterName -f -"
    if [[ $UPSERT == "delete" ]]
    then
        CMD="oc delete -f -"
    fi
    local LIST=$(ls $clusterConfDirDemo/$rn 2>/dev/null)
    local COUNT=$(echo $LIST | wc -w)
    if [[ $COUNT -gt 0 ]]; then
        for demo in $LIST; do
            local file="$clusterConfDirDemo/$rn/${demo}"
            local CLUSTERTIMEOUT=4
            local foo=${demo#"$clusterConfDirDemo/$rn/"}; foo=${foo%"/"}
            local oldifs="$IFS"; IFS="-"; tab=($foo); IFS="$oldifs"
            local FAMILLY="${tab[0]}"
            # 1x. Admin template without params
            # 2x. Admin template with default, rhn and aws params
            # 3x. Admin template with default params and script enabled
            # 4x. Admin template (reserved)
            # 5x. Admin template (reserved)
            # 6x. Developer template without params
            # 7x. Developer template with default, rhn and aws params
            # 8x. Developer template with default params and script enabled
            # 9x. Developer template (reserved)
            if [[ -x $file ]]
            then
                echo -e "${UPSERT} \e[1m$rn\e[0m \e[1mdemo\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${demo}\e[0m \e[93m(admin)\e[0m"
                . $file $UPSERT "$cn" "$localScope" "$localEnv" "$localVersion" "$cn" "$clusterName"
            else
                if [[ "$file" == "*.sh" ]]
                then
                echo -e "${UPSERT} \e[1m$rn\e[0m \e[1mdemo\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${demo}\e[0m skipped"
                else
                    echo -e "${UPSERT} \e[1m$rn\e[0m \e[1mdemo\e[0m in cluster \e[1m$cn\e[0m from file \e[1m${demo}\e[0m \e[93m(admin)\e[0m"
                    if [[ "${FAMILLY:0:1}" == "2" ]]
                    then
                        oc process -f $file --local -o yaml \
                        -p SCOPE=$localScope \
                        -p CLUSTER=$cn \
                        -p ENV=$localEnv \
                        -p VERSION=$localVersion \
                        -p RHN_USER=$SXCM_RHN_USER \
                        -p RHN_PASSWORD=$SXCM_RHN_PASSWORD \
                        | $CMD
                    elif [[ "${FAMILLY:0:1}" == "4" ]]
                    then
                        oc process -f $file --local -o yaml \
                        -p SCOPE=$localScope \
                        -p CLUSTER=$cn \
                        -p ENV=$SXCM_ENV \
                        -p VERSION=$localVersion \
                        -p AWS_ZONE=$SXCM_AWS_ZONE \
                        -p AWS_ACCESS_ID=$SXCM_AWS_ID \
                        -p AWS_ACCESS_KEY=$SXCM_AWS_KEY \
                        -p AWS_SMTP_USER=$SXCM_AWS_SMTP_USER \
                        -p AWS_SMTP_PASSWORD=$SXCM_AWS_SMTP_PASSWORD \
                        -p AWS_SMTP_ZONE=$SXCM_AWS_SMTPZONE \
                        -p AWS_SMTP_FROM=$SXCM_AWS_SMTPFROM \
                        | $CMD
                    elif [[ "${FAMILLY:0:1}" == "5" ]]
                    then
                        oc process -f $file --local -o yaml \
                        -p SCOPE=$localScope \
                        -p CLUSTER=$cn \
                        -p ENV=$localEnv \
                        -p VERSION=$localVersion \
                        -p CLUSTERID=$clusterID \
                        -p CLUSTER_REGION=$clusterRegion \
                        -p RHN_USER=$SXCM_RHN_USER \
                        -p RHN_PASSWORD=$SXCM_RHN_PASSWORD \
                        | $CMD
                    else
                        oc process -f $file --local -o yaml \
                        -p SCOPE=$localScope \
                        -p CLUSTER=$cn \
                        -p ENV=$localEnv \
                        -p VERSION=$localVersion \
                        | $CMD
                    fi
                fi
            fi
            if [[ "${UPSERT}" == "create" ]]; then
                echo -e "wait ${CLUSTERTIMEOUT}sec for deployment dependencies start"
                temporize $CLUSTERTIMEOUT 2
            fi
        done
    fi
}

# create/update cluster resources
function doUpsertClusterResources {
    local UPSERT=$1
    local cn=$2
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirResource=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    local clusterConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    if [[ ! -r $clusterConfOCPInstallFile ]]
    then
        echo -e "No cluster config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading \e[1m$cn\e[0m cluster resources"
    else 
        local clusterconfig=$(extractOCPInstallResourceList $clusterConfOCPInstallFile)
        recordAdminTokenFromCreatedCluster $cn
        for resource in $clusterconfig
        do
            applyClusterResource ${UPSERT} $cn $resource
        done
        if [[ "${#clusterconfig}" == "0" ]]
        then
            echo -e "No \e[1m$resource\e[0m cluster resource found at \e[1m$clusterConfDirResource\e[0m"
        fi
    fi
}

# create/update demos
function doUpsertClusterDemos {
    local UPSERT=$1
    local cn=$2
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirDemo=$clusterConfDir/$SXCM_USER_CONF_DIR_DEMOS
    local clusterConfOCPInstallFile=$(getOCPInstallFileForCluster $cn)
    if [[ ! -r $clusterConfOCPInstallFile ]]
    then
        echo -e "No cluster config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading \e[1m$cn\e[0m demos"
    else 
        local clusterconfig=$(listDemosCluster $cn)
        recordAdminTokenFromCreatedCluster $cn
        for demo in $clusterconfig
        do
            applyClusterDemo ${UPSERT} $cn $demo
        done
        if [[ "${#clusterconfig}" == "0" ]]
        then
            echo -e "No \e[1m$demo\e[0m demo found at \e[1m$clusterConfDirDemo\e[0m"
        fi
    fi
}

# Set openshift-install cluster admin credentials
function setCredentialsFromCreatedCluster {
    local cn=$1
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    cd $clusterConfDir &> /dev/null
    SXCM_CLUSTER_URL=$(cat auth/kubeconfig | grep server | cut -d: -f2-10 | xargs)
    appendIndividualClusterConf $cn SXCM_CLUSTER_URL $SXCM_CLUSTER_URL
    appendIndividualClusterConf $cn SXCM_CLUSTER_NAME $cn
    reloadIndividualClusterConf $cn
    cd - &> /dev/null
}

# Get openshift-install cluster admin credentials
function getCredentialsFromCreatedCluster {
    local cn=$1
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    setCredentialsFromCreatedCluster $cn
    cd $clusterConfDir &> /dev/null
    SXCM_ADM=kubeadmin
    SXCM_ADMPWD=$(cat auth/kubeadmin-password)
    cd - &> /dev/null
}

# Record SXCM_CLUSTER_ADMIN_TOKEN for created cluster in sxcm configuration
function recordAdminTokenFromCreatedCluster {
    local cn=$1
    getCredentialsFromCreatedCluster $cn
    local clusterName=$(echo $SXCM_CLUSTER_URL | sed -e 's|https://||g')
    clusterName=$(echo $clusterName | sed -e 's|\.|-|g')
    oc login --insecure-skip-tls-verify -u $SXCM_ADM -p "$SXCM_ADMPWD" $SXCM_CLUSTER_URL  &> /dev/null
    if [[ "$?" != 0 ]]; then
        echo -e "Cluster \e[1m$cn\e[0m : \e[1m\e[31mCould not login\e[0m to \e[1m$cn\e[0m with user \e[1m$SXCM_ADM\e[0m"
        echo -e "Log to openshift cluster first \e[90;4moc login -u $SXCM_ADM -p <pwd> $SXCM_CLUSTER_URL\e[0m"
        echo -e "try to run \e[90;4msxcm info\e[0m"
        exit 1;
    else
        tokena=`oc whoami -t`
        SXCM_CLUSTER_ADMIN_TOKEN=$tokena
        appendIndividualClusterConf $cn SXCM_CLUSTER_ADMIN_TOKEN $tokena
        reloadIndividualClusterConf $cn
        echo -e "Cluster \e[1m$cn\e[0m : Logged to \e[1m$cn\e[0m with user \e[1m$SXCM_ADM\e[0m (capture token)"
        echo -e "use this connection for example with \e[90;4moc get projects --token=$tokena --cluster=$clusterName\e[0m"
    fi
}

# Update cluster resources files according to local or shared resources stack
function doClusterConfigurationCreateUpdateResources {
    local cn=$1
    local clusterConfOCPInstallFile=""
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirResource=$clusterConfDir/$SXCM_USER_CONF_DIR_RESOURCES
    if [[ -r $clusterConfDir/install-config.yaml ]]
    then
        clusterConfOCPInstallFile=$clusterConfDir/install-config.yaml
    else
        clusterConfOCPInstallFile=$clusterConfDir/install-config.yaml.back
    fi
    if [[ ! -d $clusterConfDirResource ]]
    then
        mkdir -p $clusterConfDirResource &> /dev/null
    fi
    if [[ ! -r $clusterConfOCPInstallFile ]]
    then
        echo -e "No cluster config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading \e[1m$cn\e[0m cluster resources"
    else 
        clusterconfig=$(grep -A0 -P '^    clusterconfig:'  $clusterConfOCPInstallFile | cut -d: -f2 | tr "," "\n")
        for resource in $clusterconfig
        do
            if [[ -r $clusterConfDirResource/$resource.yml ]]; then
                # do nothing, leave reasource unchanged
                echo "" &> /dev/null
            elif [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES/$resource.yml ]]; then
                cp $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES/$resource.yml $clusterConfDirResource/$resource.yml &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$resource\e[0m cluster resource form \e[1mlocal\e[0m resource stack"
            elif [[ -r $SXCM_RESOURCES_PATH/$resource.yml ]]; then
                cp $SXCM_RESOURCES_PATH/$resource.yml $clusterConfDirResource/$resource.yml &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$resource\e[0m cluster resource form \e[1mshared\e[0m resource stack"
            fi
            if [[ -d $clusterConfDirResource/$resource ]]; then
                # do nothing, leave reasource unchanged
                echo "" &> /dev/null
            elif [[ -d $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES/$resource ]]; then
                cp -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_RESOURCES/$resource $clusterConfDirResource/$resource &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$resource\e[0m cluster resource form \e[1mlocal\e[0m resource stack"
            elif [[ -d $SXCM_RESOURCES_PATH/$resource ]]; then
                cp -r $SXCM_RESOURCES_PATH/$resource $clusterConfDirResource/$resource &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$resource\e[0m cluster resource form \e[1mshared\e[0m resource stack"
            fi
        done
    fi
}

# Update demos files according to local or shared demos stack
function doClusterConfigurationCreateUpdateDemos {
    local cn=$1
    local clusterConfOCPInstallFile=""
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local clusterConfDirDemo=$clusterConfDir/$SXCM_USER_CONF_DIR_DEMOS
    if [[ -r $clusterConfDir/install-config.yaml ]]
    then
        clusterConfOCPInstallFile=$clusterConfDir/install-config.yaml
    else
        clusterConfOCPInstallFile=$clusterConfDir/install-config.yaml.back
    fi
    if [[ ! -d $clusterConfDirDemo ]]
    then
        mkdir -p $clusterConfDirDemo &> /dev/null
    fi
    if [[ ! -r $clusterConfOCPInstallFile ]]
    then
        echo -e "No cluster config found at \e[1m$clusterConfOCPInstallFile\e[0m for loading \e[1m$cn\e[0m demos"
    else 
        clusterconfig=$(grep -A0 -P '^    clusterconfig:'  $clusterConfOCPInstallFile | cut -d: -f2 | tr "," "\n")
        for demo in $clusterconfig
        do
            if [[ -r $clusterConfDirDemo/$demo.yml ]]; then
                # do nothing, leave reasource unchanged
                echo "" &> /dev/null
            elif [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_DEMOS/$demo.yml ]]; then
                cp $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_DEMOS/$demo.yml $clusterConfDirDemo/$demo.yml &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$demo\e[0m demo form \e[1mlocal\e[0m demo stack"
            elif [[ -r $SXCM_DEMOS_PATH/$demo.yml ]]; then
                cp $SXCM_DEMOS_PATH/$demo.yml $clusterConfDirDemo/$demo.yml &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$demo\e[0m demo form \e[1mshared\e[0m demo stack"
            fi
            if [[ -d $clusterConfDirDemo/$demo ]]; then
                # do nothing, leave reasource unchanged
                echo "" &> /dev/null
            elif [[ -d $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_DEMOS/$demo ]]; then
                cp -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_DEMOS/$demo $clusterConfDirDemo/$demo &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$demo\e[0m demo form \e[1mlocal\e[0m demo stack"
            elif [[ -d $SXCM_DEMOS_PATH/$demo ]]; then
                cp -r $SXCM_DEMOS_PATH/$demo $clusterConfDirDemo/$demo &> /dev/null
                echo -e "\e[1m\e[90mCopy\e[0m \e[1m$demo\e[0m demo form \e[1mshared\e[0m demo stack"
            fi
        done
    fi
}

# create cluster configuration
function doClusterConfigurationCreate {
    local cn=$1
    local profile=$2
    if [[ "$cn" == "" ]]; then
        echo -en "Cluster name [$cn] : "
        read cn
    fi
    if [[ $cn == '' ]]; then
        cn="mycluster"
    fi
    if [[ $profile == '' ]]; then
        profile="default"
    fi
    echo -e "\e[1m\e[32mCreate\e[0m process for cluster \e[1m$cn\e[0m"
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local gitBranch=$cn
    if [[ -r $clusterConfDir/install-config.yaml || -r $clusterConfDir/install-config.yaml.back ]]; then
        echo -en "  Do you want to reset \e[1m$cn\e[0m cluster configuration [y/N] : "
        read removeConfig
        if [[ "$removeConfig" == "y" ]]; then
            cd $clusterConfDir &> /dev/null
            git checkout $cn &> /dev/null
            rm -rf $clusterConfDir/* $clusterConfDir/.open* &> /dev/null
            git add . &> /dev/null
            git commit -m "[$cn] Reset the $cn cluster" &> /dev/null
            git push origin $cn &> /dev/null
            cd - &> /dev/null
            echo -e "\e[31mReset\e[0m cluster \e[1m$cn\e[0m configuration"
        else
            exit;
        fi
    fi
    if [[ -z "${SXCM_GIT_REPO}" || -z "${gitBranch}" ]]; then
        doSetupGit
    fi
    if [[ -z "${SXCM_RHN_USER}" || -z "${SXCM_RHN_PASSWORD}" || -z "${SXCM_RHN_EMAIL}" || -z "${SXCM_RHN_PULLSECRET}" ]]; then
        doSetupRedhat
    fi
    if [[ -r $SXCM_PROFILES_PATH/install-config-$profile.yml ]]; then
        git clone $SXCM_GIT_REPO $clusterConfDir
        echo -e "  \e[32mcreated\e[0m cluster directory \e[1m$clusterConfDir\e[0m from \e[1m$gitBranch\e[0m branch in \e[1m$SXCM_GIT_REPO\e[0m repository"
        cd $clusterConfDir &> /dev/null
        echo -e "  \e[33mupdated\e[0m git repository configuration in \e[1m$clusterConfDir\e[0m"
        git checkout $SXCM_GIT_BRANCH_MAIN &> /dev/null
        git checkout $cn &> /dev/null
        if [[ "$?" != "0" ]]; then
            git checkout $SXCM_GIT_BRANCH_MAIN &> /dev/null
            git branch $cn &> /dev/null
            git checkout $cn &> /dev/null
            git push origin $cn &> /dev/null
            echo -e "  \e[32mcreated\e[0m git repository branch \e[1m$cn\e[0m based on \e[1m$SXCM_GIT_BRANCH_MAIN\e[0m branch"
        else
            echo -e "  \e[33mmoved\e[0m to git repository branch \e[1m$cn\e[0m previously created"
        fi
        echo -e "  \e[33mswitched\e[0m to branch \e[1m$cn\e[0m"
        touch $clusterConfDir/$SXCM_USER_CONF_FILE &> /dev/null
        appendIndividualClusterConf $cn SXCM_GIT_REPO $SXCM_GIT_REPO
        appendIndividualClusterConf $cn SXCM_GIT_BRANCH $gitBranch
        appendIndividualClusterConf $cn SXCM_RHN_USER $SXCM_RHN_USER
        # appendIndividualClusterConf $cn SXCM_RHN_PASSWORD $SXCM_RHN_PASSWORD
        appendIndividualClusterConf $cn SXCM_RHN_EMAIL $SXCM_RHN_EMAIL
        # appendIndividualClusterConf $cn SXCM_RHN_PULLSECRET $SXCM_RHN_PULLSECRET
        appendIndividualClusterConf $cn SXCM_CLUSTER_NAME $cn
        appendIndividualClusterConf $cn PROFILE $profile
        reloadIndividualClusterConf $cn
        cp $SXCM_USER_SSH_DIR/id_rsa.pub $SXCM_USER_SSH_DIR/id_rsa $clusterConfDir/ &> /dev/null
        chown 400 $clusterConfDir/id_rsa.pub $clusterConfDir/id_rsa &> /dev/null
        eval "$(ssh-agent -s)" &>/dev/null
        `ssh-add $clusterConfDir/id_rsa &> /dev/null` &> /dev/null
        echo -e "  \e[32madded\e[0m ssh key \e[1m$clusterConfDir/id_rsa\e[0m for this cluster"
        cp $SXCM_PROFILES_PATH/install-config-$PROFILE.yml $clusterConfDir/install-config.yaml &> /dev/null
        sed -i "s|__mycluster__|$cn|g" $clusterConfDir/install-config.yaml &> /dev/null
        sed -i "s|__ocpPullSecret__|$SXCM_RHN_PULLSECRET|g" $clusterConfDir/install-config.yaml &> /dev/null
        local SSH_PUBLICKEY=$(cat $clusterConfDir/id_rsa.pub)
        sed -i "s|__ocpSshPublickey__|${SSH_PUBLICKEY}|g" $clusterConfDir/install-config.yaml
        cp $clusterConfDir/install-config.yaml $clusterConfDir/install-config.yaml.back &> /dev/null
        doClusterConfigurationCreateUpdateResources $cn 
        git add . &> /dev/null
        git commit -am "[$cn] Create the $cn cluster" &> /dev/null
        git push origin $cn &> /dev/null
        cd - &> /dev/null
        echo -e "  \e[32mrecorded\e[0m cluster configuration based on \e[1m$PROFILE\e[0m profile"
        setActiveCluster $cn
        echo -e "\e[1m\e[34mSet active\e[0m cluster set to \e[1m$cn\e[0m"
    else
        echo -e "  No profile named \e[1m$PROFILE\e[0m found"
        echo -e "  you could run \e[90;4msxcm profiles\e[0m to get a list of available profiles"
        echo -en "  Do you want to create a new cluster without profile [Y/n] : "
        read newCluster
        if [[ "$newCluster" == "n" ]]; then
            echo -en "  Do you want to create a new cluster using \e[1mdefault\e[0m profile [Y/n] : "
            read newCluster
            if [[ "$newCluster" == "n" ]]; then
                echo -e "  Cluster \e[1m$cn\e[0m \e[31mwas not created\e[0m"
                exit 1;
            else
                doClusterConfigurationCreate $cn default
            fi
        else
            installClusterInstallerIfNotPresent
            echo -e "  Start \e[1m$SXCM_OCPI_RELEASE\e[0m openshift installer \e[32mconfiguration\e[0m"
            if [[ -r $clusterConfDir/metadata.json ]]; then
                echo -e "  Could not configure because cluster is \e[1malready configured\e[0m"
                echo -e "  you should run \e[90;4msxcm destroy $cn\e[0m before"
                exit 1;
            fi
            if [[ -r $clusterConfDir/terraform.tfstate ]]; then
                echo -en "  Do you want to connect to the running cluster [Y/n] : "
                read connectOCP
                echo -e ""
                if [[ "$connectOCP" == "n" ]]; then
                    echo -e "  Could not \e[36mconfigure\e[0m because cluster is already running"
                    echo -e "  you should run \e[90;4msxcm destroy $cn\e[0m before"
                    exit 1;
                else
                    cd $clusterConfDir &> /dev/null
                    git checkout $cn &> /dev/null
                    recordAdminTokenFromCreatedCluster $cn
                    git add . &> /dev/null
                    git commit -m "[$cn] Add new token to the $cn cluster" &> /dev/null
                    git push origin $cn &> /dev/null
                    cd - &> /dev/null
                    exit;
                fi
            fi
            if [[ -r $clusterConfDir/install-config.yaml ]]; then
                echo -en "  Do you want to reset cluster configuration [y/N] : "
                read removeConfig
                if [[ "$removeConfig" == "y" ]]; then
                    cd $clusterConfDir &> /dev/null
                    git checkout $cn &> /dev/null
                    rm -f $clusterConfDir/install-config.yaml.back &> /dev/null
                    rm -f $clusterConfDir/auth &> /dev/null
                    git add . &> /dev/null
                    git commit -m "[$cn] Reset the $cn cluster" &> /dev/null
                    git push origin $cn &> /dev/null
                    cd - &> /dev/null
                    echo -e "  Cluster configuration \e[1m$cn\e[0m \e[35mreset\e[0m "
                else
                    exit;
                fi
            fi
            cd $clusterConfDir &> /dev/null
            git checkout $cn &> /dev/null
            openshift-install create install-config &> /dev/null
            doClusterConfigurationCreateUpdateResources $cn 
            git add . &> /dev/null
            git commit -m "[$cn] Record the $cn cluster config" &> /dev/null
            git push origin $cn &> /dev/null
            cd - &> /dev/null
        fi
    fi
}

# import cluster configuration
function doClusterConfigurationImport {
    local cn=$1
    local branch=$2
    rm -rf /tmp/sxcm-repo  &> /dev/null
    echo -e "\e[1m\e[36mImport\e[0m process for cluster \e[1m$cn\e[0m"
    if [[ "$cn" == "" ]]; then
        echo -en "Cluster name [mycluster] : "
        read cn
    fi
    if [[ $cn == '' ]]; then
        cn="mycluster"
    fi
    if [[ $branch == '' ]]; then
        branch="$cn"
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    local gitBranch=$branch
    if [[ -d $clusterConfDir ]]; then
        echo -e "  Cluster \e[1m$cn\e[0m \e[31m is already managed\e[0m. Could not import \e[1m$cn\e[0m"
        exit;
    else
        echo -e "  Cluster \e[1m$cn\e[0m \e[32m is not managed\e[0m"
    fi
    git clone $SXCM_GIT_REPO /tmp/sxcm-repo
    if [[ $? -gt 0 ]]; then
        echo -e "  Repository \e[1m$SXCM_GIT_REPO\e[0m \e[31mis not clonable\e[0m. Could not import \e[1m$cn\e[0m"
        exit;
    else
        echo -e "  Repository \e[1m$SXCM_GIT_REPO\e[0m \e[32mis cloned\e[0m"
    fi
    cd /tmp/sxcm-repo  &> /dev/null
    git checkout $gitBranch  &> /dev/null
    if [[ $? -gt 0 ]]; then
        echo -e "  Cluster state defined in branch \e[1m$gitBranch\e[0m \e[31mdoesn't exist\e[0m. Could not import \e[1m$cn\e[0m"
        exit;
    else
        echo -e "  Cluster state defined in branch \e[1m$gitBranch\e[0m \e[32mis cloned\e[0m"
    fi
    mv /tmp/sxcm-repo $clusterConfDir &> /dev/null
    rm -rf /tmp/sxcm-repo  &> /dev/null
    echo -e "  Cluster \e[1m$cn\e[0m is \e[32mimported\e[0m from \e[1m$gitBranch\e[0m cluster state "
    cd -  &> /dev/null
    # cd $clusterConfDir &> /dev/null
    # git checkout $branch &> /dev/null
    # doClusterConfigurationCreateUpdateResources $cn 
    # git add . &> /dev/null
    # git commit -m "[$cn] Record the $cn cluster install config in branch $branch" &> /dev/null
    # git push origin $cn &> /dev/null
    # cd - &> /dev/null
    echo -e "  \e[1m\e[36mImport\e[0m of \e[1m$cn\e[0m cluster is \e[34mdone\e[0m"
}

# export cluster configuration
function doClusterConfigurationExport {
    local cn=$1
    if [[ "$cn" == "" ]]; then
        cn=`getActiveCluster`
    fi
    echo -e "\e[1m\e[35mStart\e[0m export process for cluster \e[1m$cn\e[0m"
    reloadIndividualClusterConf $cn
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ ! -d $clusterConfDir ]]; then
        echo -e "  Cluster \e[1m$cn\e[0m \e[31mdoesn't exist\e[0m. Could not export \e[1m$cn\e[0m"
        exit;
    elif [[ ! -d $clusterConfDir/.git ]]; then
        echo -e "  Cluster \e[1m$cn\e[0m \e[31mis not managed\e[0m by git. Could not export \e[1m$cn\e[0m"
        exit;
    fi
    git checkout $SXCM_GIT_BRANCH  &> /dev/null
    if [[ $? -gt 0 ]]; then
        echo -e "  Cluster state defined in branch \e[1m$SXCM_GIT_BRANCH\e[0m \e[31mdoesn't exist\e[0m. Could not export \e[1m$cn\e[0m"
        exit;
    fi
    cd $clusterConfDir  &> /dev/null
    git add . .* &> /dev/null
    git commit -m "[$cn] Export the $cn cluster state" &> /dev/null
    git push origin $cn &> /dev/null
    cd - &> /dev/null
    echo -e "  \e[1m\e[35mExport\e[0m of \e[1m$cn\e[0m cluster is \e[34mdone\e[0m"
}

# info on cluster configuration
function doClusterConfigurationInfo {
    local NAME=${1,,}
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    if [[ $cn == '' ]]; then
        echo -e "You must give a \e[1mcluster configuration name\e[0m"
        echo -e "You can create one using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or get a list of available cluster configuration with \e[90;4msxcm list\e[0m" ;
        exit 1;
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ -r $clusterConfDir/$SXCM_USER_CONF_FILE ]]; then
        . $clusterConfDir/$SXCM_USER_CONF_FILE;
        local sourceConfFile=$SXCM_PROFILES_PATH/install-config-$PROFILE.yml
        local desc=$(extractOCPInstallDescription $sourceConfFile desc)
        local service=$(extractOCPInstallDescription $sourceConfFile service)
        local demos=$(listDemosCluster $cn)
        local hourlyCost=$(extractOCPInstallHourlyCost $sourceConfFile)
        local admpwd=""
        if [[ -r $clusterConfDir/auth/kubeadmin-password ]]; then
            admpwd=$(cat $clusterConfDir/auth/kubeadmin-password)
        fi
        local STATE=""
        if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]]
        then
            if [[ -r $clusterConfDir/deployed ]]
            then
                STATE="\e[32mdeployed\e[0m"
            else
                STATE="\e[33mdeploying\e[0m"
            fi
        elif [[ -r $clusterConfDir/install-config.yaml ]]
        then
            STATE="\e[36mconfigured\e[0m"
        else
            STATE="\e[34mdefined\e[0m"
        fi
        echo -e "\e[1m\e[34mInformation\e[0m on cluster \e[1m$cn\e[0m found in $clusterConfDir/$SXCM_USER_CONF_FILE"
        printf "\e[1m%-10s\e[0m %s\n" name $cn
        printf "\e[1m%-10s\e[0m %s\n" profile $PROFILE
        printf "\e[1m%-10s\e[0m %s$STATE\n" state ""
        printf "\e[1m%-10s\e[0m%s\n" desc "$desc"
        printf "\e[1m%-10s\e[0m%s\n" services "$service"
        printf "\e[1m%-10s\e[0m %s\n" demos "$demos"
        printf "\e[1m%-10s\e[0m%s\n" cost " $hourlyCost €/h"
        printf "\e[1m%-10s\e[0m %s\n" "git repo" "$SXCM_GIT_REPO"
        printf "\e[1m%-10s\e[0m %s\n" "git branch" "$SXCM_GIT_BRANCH"
        printf "\e[1m%-10s\e[0m %s\n" "adm user" "kubeadmin"
        printf "\e[1m%-10s\e[0m %s\n" "adm pwd" "$admpwd"
        exit 0;
    else
        echo -e "Cluster configuration named \e[1m$cn\e[0m in $clusterConfDir doesn't exist"
        echo -e "You can create one using \e[90;4msxcm create $cn\e[0m" ;
        exit 3;
    fi
}

# history on cluster configuration
function doClusterConfigurationHistory {
    local NAME=${1,,}
    local limit=$2
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    if [[ $limit == '' ]]; then
        limit=30
    fi
    if [[ $cn == '' ]]; then
        echo -e "You must give a \e[1mcluster configuration name\e[0m"
        echo -e "You can create one using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or get a list of available cluster configuration with \e[90;4msxcm list\e[0m" ;
        exit 1;
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ -r $clusterConfDir/$SXCM_USER_CONF_FILE ]]; then
        . $clusterConfDir/$SXCM_USER_CONF_FILE;
        echo -e "\e[1m\e[34mGitops history\e[0m on cluster \e[1m$cn\e[0m (30 last logs)"
        cd $clusterConfDir &> /dev/null
        git log --pretty='format:%ci %s' | head -n $limit
        cd - &> /dev/null
        exit 0;
    else
        echo -e "Cluster configuration named \e[1m$cn\e[0m in $clusterConfDir doesn't exist"
        echo -e "You can create one using \e[90;4msxcm create $cn\e[0m" ;
        exit 3;
    fi
}

# edit cluster configuration
function doClusterConfigurationEdit {
    local NAME=${1,,}
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ $cn == '' ]]; then
        echo -e "You must give a \e[1mcluster configuration name\e[0m"
        echo -e "You can create one using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or get a list of available cluster configuration with \e[90;4msxcm list\e[0m" ;
        exit 1;
    fi
    echo -e "\e[1m\e[33mEdit\e[0m the cluster \e[1m$cn\e[0m profile in $clusterConfDir"
    if [[ ! -w $clusterConfDir/install-config.yaml ]]; then
        echo -e "Cluster configuration named \e[1m$cn\e[0m in $clusterConfDir/install-config.yaml doesn't exist or is not writable"
        echo -e "You can create one using \e[90;4msxcm create $cn\e[0m" ;
        exit 2;
    else
        if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]]; then
            echo -e "Could not edit because cluster is already deployed"
            echo -e "you should run \e[90;4msxcm destroy $cn\e[0m before"
            exit 21;
        fi
        if [[ -r $clusterConfDir/install-config.yaml ]]; then
            cp $clusterConfDir/install-config.yaml $clusterConfDir/install-config.yaml.back
            vi $clusterConfDir/install-config.yaml
            doClusterConfigurationCreateUpdateResources $cn 
            echo -e "Cluster configuration \e[1m$cn\e[0m \e[36mupdated\e[0m "
            cd $clusterConfDir  &> /dev/null
            git add . &> /dev/null
            git commit -m "[$cn] Update the $cn cluster definition" &> /dev/null
            git push origin $cn &> /dev/null
            cd - &> /dev/null
            echo -e "Cluster configuration \e[1m$cn\e[0m \e[36mrecorded\e[0m into gitops repository"
        else
            echo -e "Cluster configuration named \e[1m$cn\e[0m in $clusterConfDir/install-config.yaml doesn't exist"
            echo -e "You can create one using \e[90;4msxcm create $cn\e[0m" ;
            exit 22;
        fi
    fi
}

# update cluster configuration
function doClusterConfigurationUpdate {
    local NAME=${1,,}
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ $cn == '' ]]; then
        echo -e "You must give a \e[1mcluster configuration name\e[0m"
        echo -e "You can create one using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or get a list of available cluster configuration with \e[90;4msxcm list\e[0m" ;
        exit 1;
    fi
    echo -e "\e[1m\e[33mUpdate\e[0m the cluster \e[1m$cn\e[0m profile in $clusterConfDir"
    if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]]; then
        updateClusterResources $cn
        updateClusterDemos $cn
        echo -e "Cluster configuration \e[1m$cn\e[0m \e[36mupdated\e[0m "
        cd $clusterConfDir  &> /dev/null
        git add . &> /dev/null
        git commit -m "[$cn] Update the $cn cluster resources" &> /dev/null
        git push origin $cn &> /dev/null
        cd - &> /dev/null
    else
        echo -e "Cluster configuration named \e[1m$cn\e[0m is not deployed"
        echo -e "You can deploy it using \e[90;4msxcm deploy $cn\e[0m" ;
        exit 22;
    fi
}

# delete cluster configuration
function doClusterConfigurationDelete {
    local NAME=${1,,}
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    echo $clusterConfDir
    if [[ $cn == '' ]]; then
        echo -e "You must give a \e[1mcluster configuration name\e[0m"
        echo -e "You can create one using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or get a list of available cluster configuration with \e[90;4msxcm list\e[0m" ;
        return 1;
    fi
    if [[ ! -w $clusterConfDir/install-config.yaml && ! -w $clusterConfDir/install-config.yaml.back ]]; then
        echo -e "Cluster configuration named \e[1m$cn\e[0m doesn't exist or is not writable"
        echo -e "You can create one using \e[90;4msxcm create $cn\e[0m" ;
        return 2;
    else
        if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]]; then
            echo -e "\e[1m$cn\e[0m cluster configuration already \e[36mdeployed\e[0m"
            echo -e "You must destroy it first with \e[90;4msxcm destroy $cn\e[0m" ;
        else
            rm -rf $clusterConfDir
            echo -e "\e[1m\e[31mDelete\e[0m the cluster \e[1m$cn\e[0m"
            if [[ $cn == `getActiveCluster` ]]; then
                local LIST=$(listClusterConfigs)
                local COUNT=$(echo $LIST | wc -w)
                if [[ $COUNT -gt 0 ]]; then
                    for cluster in $LIST
                    do
                        setActiveCluster $cluster
                    done
                else
                    setActiveCluster ""
                fi
            fi
        fi
    fi
}

# list cluster configuration
function doClusterConfigurationList {
    local LIST=$(listClusterConfigs)
    local COUNT=$(echo $LIST | wc -w)
    local STATE=""
    local cn=$(getActiveCluster)
    local clusterConfOCPInstallFile=""
    local desc=""
    if [[ $COUNT -gt 0 ]]; then
        echo -e "\e[34mList\e[0m \e[1m$COUNT\e[0m cluster configuration in the cluster stack"
        for cluster in $LIST
        do
            if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/metadata.json || -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/terraform.tfstate ]]
            then
                local URL=$(cat $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/auth/kubeconfig | grep server | cut -d: -f2-10 | xargs)
                if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/deployed ]]
                then
                    STATE="\e[32m(deployed)  \e[0m - $URL"
                else
                    STATE="\e[33m(deploying) \e[0m - $URL"
                fi
                clusterConfOCPInstallFile=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/install-config.yaml.back
            elif [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/install-config.yaml ]]
            then
                clusterConfOCPInstallFile=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/install-config.yaml
                STATE="\e[36m(configured)\e[0m"
            else
                clusterConfOCPInstallFile=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/install-config.yaml.back
                STATE="\e[34m(defined)   \e[0m"
            fi
            if [[ -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/$SXCM_USER_CONF_FILE ]]; then
                . $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cluster/$SXCM_USER_CONF_FILE;
                export SXCM_CLUSTER_NAME=$(getActiveCluster);
            fi
            desc=$(extractOCPInstallDescription $clusterConfOCPInstallFile)
            if [[ $cluster == $SXCM_CLUSTER_NAME ]]; then
                printf "\e[1mx %-14s\e[0m $STATE %s\n" $cluster "$desc"
            else
                printf "  %-14s $STATE %s\n" $cluster "$desc"
            fi
            desc=""
        done
    else
        echo -e "\e[1mNo\e[0m cluster configuration found in the cluster stack"
        echo -e "You can create one using \e[90;4msxcm create mycluster\e[0m" ;
    fi
}

# clone cluster configuration
function doClusterConfigurationClone {
    local cn=$1
    local source=$2
    rm -rf /tmp/sxcm-repo  &> /dev/null
    echo -e "\e[1m\e[33mClone\e[0m process for cluster \e[1m$cn\e[0m"
    if [[ "$cn" == "" ]]; then
        echo -en "Cluster name [mycluster] : "
        read cn
    fi
    if [[ $cn == '' ]]; then
        cn="mycluster"
    fi
    if [[ $source == '' ]]; then
        source=$(getActiveCluster)
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ -d $clusterConfDir ]]; then
        echo -e "  Cluster \e[1m$cn\e[0m is \e[31m already managed\e[0m. Could not clone \e[1m$cn\e[0m"
        exit;
    else
        if [[ -d $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$source ]]; then
            cp -r $SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$source $clusterConfDir
            cd $clusterConfDir  &> /dev/null
            git branch $cn &> /dev/null
            git checkout $cn &> /dev/null
            if [[ ! -r install-config.yaml && -r install-config.yaml.back ]]
            then
                cat install-config.yaml.back > install-config.yaml
            fi
            rm -rf install-config.yaml.back .open* auth deployed id* tls *.json &> /dev/null
            git add . .open* &> /dev/null
            git commit -m "[$cn] Record the $cn cluster install config cloned from $source" &> /dev/null
            doClusterConfigurationCreateUpdateResources $cn 
            git add . &> /dev/null
            git commit -m "[$cn] Record the $cn cluster install post-config" &> /dev/null
            git push origin $cn &> /dev/null
            cd -  &> /dev/null
        else
            echo -e "  Cluster \e[1m$source\e[0m \e[32m doesn't exist\e[0m"
        fi
    fi
    
    # echo -e "  Cluster \e[1m$cn\e[0m is \e[32mcloned\e[0m from \e[1m$gitBranch\e[0m cluster state "
    cd -  &> /dev/null
        # cd $clusterConfDir &> /dev/null
        # cd - &> /dev/null
    echo -e "  \e[1m\e[33mClone\e[0m of \e[1m$cn\e[0m cluster is \e[34mdone\e[0m"
}

# change active cluster
function doClusterDisplayActive {
    local cn=$(getActiveCluster)
    echo -e "\e[1m$cn\e[0m cluster configuration is set as the \e[32mactive\e[0m cluster"
}

# change active cluster
function doClusterChangeActive {
    local NAME=$1
    local LIST=$(listClusterConfigs)
    if [[ "" == $NAME ]]; then
        echo -e "You must give a cluster name to set as the active cluster"
        echo -e "You can create a cluster using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or list available cluster configuration by running \e[90;4msxcm list\e[0m" ;
        return 1;
    else
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                echo -e "Set \e[32mactive\e[0m cluster configuration to \e[1m$NAME\e[0m"
                setActiveCluster $NAME
                return 0;
            fi
        done
    fi
    echo -e "\e[1m$NAME\e[0m cluster configuration not found in the cluster stack"
    echo -e "You can create it using \e[90;4msxcm create mycluster\e[0m" ;
    echo -e "or list available cluster configuration by running \e[90;4msxcm list\e[0m" ;
    return 1;
}

# deploy given cluster
function doClusterDeploy {
    local NAME=${1,,}
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ -r $clusterConfDir/metadata.json || -r $clusterConfDir/terraform.tfstate ]]; then
        echo -e "\e[1m$cn\e[0m cluster configuration already \e[36mdeployed\e[0m"
        cd $clusterConfDir &> /dev/null
        git checkout $cn &> /dev/null
        createClusterResources $cn
        createClusterDemos $cn
        git add . &> /dev/null
        git commit -m "[$cn] Configuration day-two of the $cn cluster" &> /dev/null
        git push origin $cn &> /dev/null
        cd - &> /dev/null
        echo -e "You can refresh connection by running \e[90;4msxcm connect $cn\e[0m" ;
        echo -e "or destroy this cluster with \e[90;4msxcm destroy $cn\e[0m" ;
    else
        installClusterInstallerIfNotPresent
        echo -e "Start \e[1m$cn\e[0m cluster deployment based on \e[1mopenshift $SXCM_OCPI_RELEASE\e[0m"
        cat $clusterConfDir/install-config.yaml > $clusterConfDir/install-config.yaml.back
        cd $clusterConfDir &> /dev/null
        openshift-install create cluster
        touch $clusterConfDir/deployed
        echo -e "Cluster \e[1m$cn\e[0m \e[36mdeployed\e[0m"
        git checkout $cn &> /dev/null
        git add . &> /dev/null
        git commit -m "[$cn] Configuration post-deployment of the $cn cluster" &> /dev/null
        git push origin $cn &> /dev/null
        createClusterResources $cn
        createClusterDemos $cn
        git add . &> /dev/null
        git commit -m "[$cn] Configuration day-two of the $cn cluster" &> /dev/null
        git push origin $cn &> /dev/null
        cd - &> /dev/null
        echo -e "Cluster \e[1m$cn\e[0m \e[93mdeployed\e[0m"
    fi
}

# deploy active cluster
function doClusterDeployActive {
    doClusterDeploy `getActiveCluster`
}

# destroy given cluster
function doClusterDestroy {
    local NAME=${1,,}
    local cn=`getActiveCluster`
    if [[ `getActiveCluster` != $NAME &&  "" != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                cn=$NAME
            fi
        done
    else 
        cn=`getActiveCluster`
    fi
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ -r $clusterConfDir/metadata.json ]]; then
        echo -en "Do you want to \e[31mdestroy\e[0m cluster $cn [y/N] : "
        read doDestroy
        if [[ "$doDestroy" == "y" ]]; then
            installClusterInstallerIfNotPresent
            echo -e "Start \e[1m$cn\e[0m cluster \e[31mdestruction\e[0m"
            cd $clusterConfDir &> /dev/null
            git checkout $cn &> /dev/null
            git add . &> /dev/null
            git commit -m "[$cn] Record state just before destruction of the $cn cluster" &> /dev/null
            openshift-install destroy cluster
            git add . &> /dev/null
            git commit -m "[$cn] Record state just after destruction of the $cn cluster" &> /dev/null
            cat $clusterConfDir/install-config.yaml.back > $clusterConfDir/install-config.yaml
            rm $clusterConfDir/install-config.yaml.back $clusterConfDir/terraform.* $clusterConfDir/meta* $clusterConfDir/deployed &> /dev/null
            git add . &> /dev/null
            git commit -m "[$cn] Record state after post-destruction actions of the $cn cluster" &> /dev/null
            git push origin $cn &> /dev/null
            cd - &> /dev/null
            echo -e "Cluster \e[1m$cn\e[0m \e[91mdestroyed\e[0m"
        else
            exit;
        fi
    else
        echo -e "\e[1m$cn\e[0m cluster configuration doesn't have metadata.json and terraform.tfstate files"
        echo -e "You can create it using \e[90;4msxcm deploy $cn\e[0m" ;
    fi
}

# destroy active cluster
function doClusterDestroyActive {
    doClusterDestroy `getActiveCluster`
}

# connect given cluster
function doClusterConnect {
    local NAME=$1
    if [[ "" == $NAME ]]
    then
        echo -e "\eYou must give a cluster name or set an active one"
        echo -e "You can create a cluster using \e[90;4msxcm create mycluster\e[0m" ;
        echo -e "or list available cluster configuration by running \e[90;4msxcm list\e[0m" ;
        echo -e "and set one as active with \e[90;4msxcm switch mycluster\e[0m" ;
        return 1;
    elif [[ `getActiveCluster` != $NAME ]]
    then
        local LIST=$(listClusterConfigs)
        for cluster in $LIST
        do
            if [[ $cluster == $NAME ]]; then
                echo -e "Set \e[1mactive cluster\e[0m configuration to \e[1m$NAME\e[0m"
                setActiveCluster $NAME
            fi
        done
    fi
    local cn=`getActiveCluster`
    local clusterConfDir=$SXCM_USER_CONF_DIR/$SXCM_USER_CONF_DIR_CLUSTER/$cn
    if [[ -r $clusterConfDir/metadata.json && -r $clusterConfDir/terraform.tfstate ]]; then
        recordAdminTokenFromCreatedCluster $cn
        echo -e "\e[1\e[36mconnected\e[0m to cluster \e[1m$cn\e[0m "
    else
        echo -e "\e[1m$cn\e[0m cluster configuration doesn't have metadata.json and terraform.tfstate files"
        echo -e "You can create it using \e[90;4msxcm deploy $cn\e[0m" ;
    fi
}

# connect active cluster
function doClusterConnectActive {
    doClusterConnect `getActiveCluster`
}

# sub-menu for create command
function menuClusterCreate {
    if [[ "$1" == "init"  && "$2" == "" ]]; then
        menuHeadArt
            cat <<EOF

sxcm init sub-command for initialize a sxcm managed cluster stored into the managed cluster stack

# Usage

[user@localhost]$ sxcm init CLUSTERNAME [PROFILE]


# Examples
```
# Initialize a cluster named mycluster using the default profile
sxcm init mycluster
# Initialize a cluster named mycluster using the micro profile
sxcm init mycluster micro
# If you want to have a list of availables cluster profiles, you can run :
sxcm profiles

EOF
    elif [[ -z "$2" || "$2" == "" ]]; then
        menuHeadArt
            cat <<EOF

sxcm create sub-command for creating a sxcm managed cluster by adding a new cluster configuration to the managed cluster stack

# Usage

[user@localhost]$ sxcm create CLUSTERNAME [PROFILE]


# Examples
```
# Initialize a cluster named mycluster using the default profile
sxcm create mycluster
Initialize a cluster named mycluster using the micro profile
sxcm create mycluster micro
# If you want to have a list of availables cluster profiles, you can run :
sxcm profiles

EOF
    else
        doClusterConfigurationCreate $2 $3
    fi
}

# sub-menu for import command
function menuClusterImport {
    if [[ -z "$1" || "$1" == "" ]]; then
        menuHeadArt
            cat <<EOF

sxcm import sub-command for importing a sxcm managed cluster. It will create a local cluster configuration 
based on a remote cluster repository

# Usage

[user@localhost]$ sxcm import CLUSTERNAME [BRANCH]


# Examples
```
# Import the cluster named mycluster using the cluster git repository branch named mycluster (fail if not found)
sxcm import mycluster
# Import the cluster named mycluster using the myclusterbranch branch stored into the cluster git repository
sxcm import mycluster myclusterbranch

EOF
    else
        doClusterConfigurationImport $1 $2
    fi
}


# sub-menu for export command
function menuClusterExport {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConfigurationExport `getActiveCluster`
    else
        doClusterConfigurationExport $1
    fi
}

# sub-menu for info command
function menuClusterInfo {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConfigurationInfo `getActiveCluster`
    else
        doClusterConfigurationInfo $1
    fi
}

# sub-menu for history command
function menuClusterHistory {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConfigurationHistory `getActiveCluster`
    else
        doClusterConfigurationHistory $1 $2
    fi
}

# sub-menu for edit command
function menuClusterEdit {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConfigurationEdit `getActiveCluster`
    else
        doClusterConfigurationEdit $1
    fi
}

# sub-menu for update command
function menuClusterUpdate {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConfigurationUpdate `getActiveCluster`
    else
        doClusterConfigurationUpdate $1
    fi
}

# sub-menu for delete command
function menuClusterDelete {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConfigurationDelete `getActiveCluster`
    else
        doClusterConfigurationDelete $1
    fi
}

# sub-menu for list command
function menuClusterList {
    doClusterConfigurationList
}

# sub-menu for current command
function menuClusterCurrent {
    if [[ "$1" == "--name" || "$2" == "--name" ]]; then
        getActiveCluster
    elif [[ -z "$1" || "$1" == "" ]]; then
        doClusterDisplayActive
    else
        doClusterChangeActive $1
    fi
}

# sub-menu for deploy command
function menuClusterDeploy {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterDeployActive
    else
        doClusterDeploy $1
    fi
}

# sub-menu for destroy command
function menuClusterDestroy {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterDestroyActive
    else
        doClusterDestroy $1
    fi
}

# sub-menu for connect command
function menuClusterConnect {
    if [[ -z "$1" || "$1" == "" ]]; then
        doClusterConnectActive
    else
        doClusterConnect $1
    fi
}

# sub-menu for clone command
function menuClusterClone {
    if [[ -z "$1" || "$1" == "" ]]; then
        menuHeadArt
            cat <<EOF

sxcm clone sub-command for cloning an sxcm managed cluster. It will create a local cluster configuration 
based on a copy of a local custer.

# Usage

[user@localhost]$ sxcm clone CLUSTERNAME [CLUSTERSOURCE]


# Examples
```
# clone the active cluster into a new cluster named mynewcluster
sxcm clone mynewcluster
# clone the local cluster mycluster into a new cluster named mynewcluster
sxcm clone mynewcluster mycluster

EOF
    else
        doClusterConfigurationClone $1 $2
    fi
}

# main menu for the cluster sub-command
function menuCluster {
    case $1 in
        create|init)    menuClusterCreate ${1} ${2} ${3} ${4};;
        info)           menuClusterInfo ${2} ${3};;
        history)        menuClusterHistory ${2} ${3};;
        edit)           menuClusterEdit ${2} ${3};;
        update)         menuClusterUpdate ${2} ${3};;
        delete)         menuClusterDelete ${2} ${3};;
        list)           menuClusterList ${2};;
        current|switch) menuClusterCurrent ${2} ${3};;
        deploy)         menuClusterDeploy ${2} ${3};;
        destroy)        menuClusterDestroy ${2} ${3};;
        connect|login)  menuClusterConnect ${2} ${3};;
        import)         menuClusterImport ${2} ${3} ${4};;
        export)         menuClusterExport ${2} ${3};;
        clone)          menuClusterClone ${2} ${3} ${4};;
        *)              menuUsage;;
    esac
}
